<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022-06-08-散步小记</title>
    <url>/2022/2022-06-08-%E6%95%A3%E6%AD%A5%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="散步小记"><a href="#散步小记" class="headerlink" title="散步小记"></a>散步小记</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>今天，我稍微慵懒。赖了一小时的床，又看了会一些微信公众号的文章，才慢吞吞地起来刷牙抹脸。晨起，没有明媚的感觉，黄褐色的光照耀在我租房处的侧窗。</p>
<p>窗户没有纱窗，夜里可能有一些意外的访客。微微透出小孔，让租房内有一丝喘气的机会。四周房屋紧挨着，密不透风，而我是这栋楼的一层的一个租户。</p>
<p>屋内夏天潮湿度65%以上，我已经住了有些许时间。床底潮湿味时而让我觉得慵懒不想做任何事情，情绪的内耗和我不希望别人承受自己的负能量，就把自己闷在一边，也感谢父母的理解和支持，让我起码有了苟延残喘的机会。</p>
<p>我就像一团湿乎乎的泥巴，散发着黏糊糊的味道，还有这个社会扔进泥巴里的东西。</p>
<p>我想起深渊和<strong>泥团</strong>这个朋友，今天好像有这个缘分，但我本能地嫌弃，很抱歉，<strong>泥团</strong>，抱抱*<em>(￣︶￣</em>))**，举高高！</p>
<p>租房好歹有一个可以遮风挡雨的地方，但有时我在渴望更阳光的地方生长。</p>
<p>在写这篇小记的时候，突然想起一个地方“监狱”，阴暗潮湿密不透风还有人类排污的地方。</p>
<p>我的博客也就像树洞或者可以释放存放的东西，我把自己的一些真实感受留到自己的地方。</p>
<p>今天早餐时间倒是提前了一个小时，九点半就吃上热乎乎的早餐，记得学生时代，每天早餐都能准时享受父母的备餐。而现在进入社会，我变了很多，变得更加不知节制。</p>
<p>我觉得自己可能是个创造探索类型的工作狂，但是精力有限。确实是个矛盾的特点，而且也需要休息，这个社会可能不需要我这种低学历的探索创造者，只需要我像个底层一样的工作，奉献就足够了，另一个矛盾的特点就是我的体质比同龄人弱，我需要更多的休息，然而这个社会不需要我这种没什么突出的工种，我就像边缘一样。</p>
<p>等一下加入我的自我介绍里面，o(<em>￣▽￣</em>)ブ。</p>
<h2 id="化缘"><a href="#化缘" class="headerlink" title="化缘"></a>化缘</h2><h3 id="扫把"><a href="#扫把" class="headerlink" title="扫把"></a>扫把</h3><p>出门了，我向往日行走一般，经过附近的垃圾堆，清洁阿姨又如往日在整理搬运垃圾。</p>
<p>今天见到她，拿着硬毛扫把在地上扫垃圾。</p>
<p>让我想起租房的那把软毛扫把，硬和软毛的区别……</p>
<h3 id="草木和风"><a href="#草木和风" class="headerlink" title="草木和风"></a>草木和风</h3><p>它们在和我打招呼。</p>
<h3 id="肯德基的广告音响"><a href="#肯德基的广告音响" class="headerlink" title="肯德基的广告音响"></a>肯德基的广告音响</h3><p>嘿嘿，触发了一个灵感。不可说，不可说。</p>
<p>(ノへ￣、)我的梦想清单有多了一条，别人是没有梦想，我是<strong>白日梦</strong>太多了。</p>
<h3 id="街头推销员"><a href="#街头推销员" class="headerlink" title="街头推销员"></a>街头推销员</h3><p>​	回来的途中，我又被一个美团买菜的推销员盯上，这次是个女孩子，大概也是出来工作，背着书包，盯着往来的人。</p>
<p>上来，我一看到美团买菜，就头疼。</p>
<p>​	上一次，在一个暴雨的夜晚被一个刚找工作化着廉价妆骨瘦如柴的小姐姐，哭零零地求我下载美团买菜 APP 。我开始是拒绝的，后面是小姐姐哭着喊刚出来找工作不容易，我想起自己的过往，不由心动，又心一横，拒绝。最后，我还是心软了。小姐姐”打蛇上棍“，我注册完 APP ，又鼓动我买东西。最后我挑三拣四，才选了纸。然后，她也就被上司叫回去了，暴雨夜出来工作确实不太安全。当天晚上的买菜的送货速度到是很快，我回租房不久，就收到消息了，又急匆匆地跑出来。</p>
<p>​	现在是背书包的小姐姐，微微黑皮肤，戴眼镜。</p>
<p>​	我：“我已经下载过，真的不需要。”</p>
<p>​	小姐姐：“没关系，现在有活动。你看这里，有很多很多零食。”</p>
<p>​	我：“不需要，我不好吃零食。&#x2F;(ㄒoㄒ)&#x2F;~~。”</p>
<p>​	内心波动：我本来也是贪吃的人，只是肠胃真的不能吃，水果都很少碰。</p>
<p>​	小姐姐：”拿纸巾呢？“</p>
<p>​	我：”我租房还有一大卷呢。“</p>
<p>​	小姐姐：”你就看看吗？“</p>
<p>​	我：“抱歉，我真的没有什么想要购买的感觉，而且我流量也不足。”</p>
<p>​	小姐姐：“那我就给你开个热点如何？”</p>
<p>​	我：“不需要，我手机有近两百个APP了。&#x2F;(ㄒoㄒ)&#x2F;~~”</p>
<p>​	内心波动：为什么？为什么要戳我伤疤，每一个善良的人拒绝的理由一定是戳中内心的痛楚，嗯~ o(<em>￣▽￣</em>)o。</p>
<p>​	我：“就这样吧。我要回去了。”</p>
<p>​	然后一屁绝尘。</p>
<p>​	我就是我，潇洒如我。</p>
<h3 id="半路肚子疼-ノへ￣、"><a href="#半路肚子疼-ノへ￣、" class="headerlink" title="半路肚子疼(ノへ￣、)"></a>半路肚子疼(ノへ￣、)</h3><p>在拒绝不久，肚子疼就出来。</p>
<p>我正在想着这女孩推销就像我找工作一样，都是处于没有需求的地位，内心又动了恻隐之心，要不要回头帮个忙。</p>
<p>这是来自一股强烈的腹痛的感受，我微弓着向租房处地方前行。</p>
<p>我脑海中不由：“难道我得罪这位推销员，其实是一名‘天之娇女’了。我的傲慢，我忏悔，我的……肚子疼！”</p>
<p>不仅悲从中来，一瘸一拐的前进……</p>
<p>回到租房处，如释重负。</p>
<h2 id="缘离"><a href="#缘离" class="headerlink" title="缘离"></a>缘离</h2><p>以后再说。</p>
]]></content>
      <categories>
        <category>体验</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo性能优化记录</title>
    <url>/2022/Hexo%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  本来我是打算先写一篇关于vim的笔记。其实我觉得自己的博客没有自己真实的技术输出，所以这些看起来文章看起来更多像自己的笔记。<br>  我是用的是谷歌的“开发者工具”进行来实施对应优化的。</p>
<p>之前更多是采用<code>Webpack</code>的构建<code>plugin</code>进行优化，所以这对于我来说算是一个新的尝试。</p>
<h1 id="英文词汇"><a href="#英文词汇" class="headerlink" title="英文词汇"></a>英文词汇</h1><p>Accessibility 可访问性</p>
<p>case n. 情况</p>
<p>custom n. 习惯的，v.自定义 文章里面应该指的是自定义属性之类的</p>
<p>collapse n. 列，简写 Col</p>
<p>manner n. 样子，礼貌</p>
<p>Performance 表演，表现</p>
<p>Prctices 实践，惯例</p>
<p>sensitive a. 敏感的，灵敏的</p>
<p>Treat 	vt. 视为，n 款待</p>
<h1 id="感谢-THANKS"><a href="#感谢-THANKS" class="headerlink" title="感谢 THANKS"></a>感谢 THANKS</h1><p><a href="https://webmasters.stackexchange.com/questions/56561/is-gzip-compression-available-for-github-pages">Is gzip compression available for GitHub pages?</a></p>
<p><a href="https://blog.skk.moe/post/improve-fcp-for-my-blog/">skk blog</a></p>
<p><a href="https://segmentfault.com/a/1190000039843064?utm_source=tag-newest">Layout Shift</a></p>
<p><a href="https://www.npmjs.com/package/html-minifier">html-miniifier</a></p>
<p><a href="https://www.smashingmagazine.com/2021/01/front-end-performance-2021-free-pdf-checklist/">Fromt-End Performance Check List</a></p>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ul>
<li>Layout.shift 可视元素渲染起始位置</li>
<li>Frist Contentful Paint 首次加载时间</li>
</ul>
<h1 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h1><ul>
<li><p><strong>Serve images in next-gen formats</strong> 2.2 s 建议我采用 Webp 或者 AVIF 格式图片。</p>
</li>
<li><p><strong>Efficiently encode images</strong> 1.5 s 建议我采用压缩图片和 使用更少的请求</p>
</li>
<li><p>Eliminate render-blocking resources 0.66 s 压缩资源</p>
</li>
<li><p>Use HTTP&#x2F;2 0.3s 使用HTTP&#x2F;2协议</p>
</li>
<li><p><strong>Image elements do not have explicit <code>width</code> and <code>height</code></strong> 图像无明显宽高</p>
</li>
<li><p><strong>Serve static assets with an efficient cache policy 17 resources found</strong>应该是配置请求策略，后面转图床或者个人服务器。</p>
</li>
<li><p><strong>Minimize main-thread work</strong> 7.6 s 考虑减少分析、编译和执行 js 所花费的时间。</p>
</li>
<li><p>User Timing marks and measures 用户计时标志和措施</p>
</li>
<li><p>Keep request counts low and transfer sizes small 保持请求体积合理化</p>
</li>
<li><p>Largest Contentful Paint element 最大绘制内容</p>
</li>
<li><p>Avoid large layout shifts 避免大的布局变化</p>
</li>
<li><p>Avoid long main-thread tasks </p>
</li>
<li><p>Avoid non-composited animations</p>
</li>
<li><p><strong>Buttons do not have an accessible name</strong></p>
</li>
<li><p>**Links do not have a discernible name **</p>
</li>
<li><p>BEST PRACTICES <code>[user-scalable=&quot;no&quot;]</code> is used in the <code>&lt;meta name=&quot;viewport&quot;&gt;</code> element or the <code>[maximum-scale]</code> attribute is less than 5.</p>
</li>
<li><p>Background and foreground colors do not have a sufficient contrast ratio.背景色和前景色没有足够的对比度。</p>
</li>
<li><p>Browser errors were logged to the console 控制台打印错误 bulma sweetaler2</p>
</li>
<li><p>Links are not crawlable</p>
</li>
<li><p>Web app manifest or service worker do not meet the installability requirements </p>
</li>
<li><p><input disabled="" type="checkbox"> 
search.xml访问速度慢,search插件用的是老的数据结构能否使用json格式之类地进行，或者更加轻便的数据格式</p>
</li>
<li><p><input disabled="" type="checkbox"> 
工具库尝试改cdn，需要降级方案支持</p>
</li>
<li><p><input disabled="" type="checkbox"> 
多域名多id方案？</p>
</li>
<li><p><input disabled="" type="checkbox"> 
压缩模块</p>
</li>
</ul>
<h1 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h1><ul>
<li><input disabled="" type="checkbox"> 图片资源优化可选策略<ul>
<li><input disabled="" type="checkbox"> <del>替换格式</del>，浏览器有一部分不支持，图床也要搞，还要搞个多图方案，算了吧</li>
<li><input checked="" disabled="" type="checkbox"> 压缩体积，采用tinify压缩，自己写启动脚本</li>
<li><input disabled="" type="checkbox"> 懒加载处理，以后再说</li>
<li><input disabled="" type="checkbox"> 小图预加载，搞到图床再说</li>
<li><input disabled="" type="checkbox"> 骨架渲染，现在没空</li>
<li><input disabled="" type="checkbox"> 分离静态资源，搞到图床再说</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 字体资源优化<ul>
<li><input disabled="" type="checkbox"> 搞到访问好的静态服务器，最好是 free，主题里面竟然下载全部 UI 库，不过图标真的可以过我审美。</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> 按钮添加可访问名称，语义化处理，seo优化</li>
<li><input checked="" disabled="" type="checkbox"> 图片悬浮文本，语义化处理，seo优化</li>
<li><input checked="" disabled="" type="checkbox"> 请求优化，开启 gzip 压缩</li>
<li><input disabled="" type="checkbox"> html 压缩，css 压缩，js 压缩</li>
<li><input disabled="" type="checkbox"> Hexo 能 treeShaking 吗</li>
</ul>
<h1 id="问题与思考"><a href="#问题与思考" class="headerlink" title="问题与思考"></a>问题与思考</h1><ol>
<li>压缩文件虽然成功了，但是部署更新并没生效。</li>
</ol>
<p>思考：首先，我翻看了打包目录，确实<code>html</code>代码都被我压缩过了。</p>
<p>其次，我重复打包部署命令，发现里面输出文本有</p>
]]></content>
      <categories>
        <category>web</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>web,性能</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo过滤器Filter</title>
    <url>/2022/Hexo%E8%BF%87%E6%BB%A4%E5%99%A8Filter/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前兴冲冲的自己用Nodejs实现一个简易式可以加载插件打包器，虽然可以对文件进行压缩，但和Hexo 部署包没有产生什么关系，也和自己学到一半，就冲冲有关系。</p>
<p>官方中文文档也是确实的，所以我是看主题和库，进行模仿和学习的。</p>
<p>今天我将用文字记录，不加图，没有工作不想搞图床，(* ￣3)(ε￣ *)，谁能给我一份工作。</p>
<p>我还没吃早餐，┭┮﹏┭┮，突然想起尼米。</p>
<h1 id="开始讲述"><a href="#开始讲述" class="headerlink" title="开始讲述"></a>开始讲述</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>首先是文件目录，在你的根目录里创建一个名为 <code>scripts</code>的文件夹。</p>
<p>文件内可以创建一些Hexo的扩展，对应的英文名小写复数形式即是对应的扩展器集成。</p>
<p>如：过滤器 (Filter)则在上面的所说的目录里创建一个名为 <code>filters</code>的文件夹</p>
<p>创建文件夹后，在该文件夹里加入 <code>index.js</code>文件夹</p>
<p>并写入和调用相应过滤器函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function"><span class="params">hexo</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">const</span> &#123;filter&#125;=hexo.<span class="property">extend</span>;</span><br><span class="line">    filter.<span class="title function_">register</span>(type,callbackFn,options)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里过滤器最先执行</span></span><br><span class="line"><span class="comment">//hexo.extend.filter.register(&#x27;after_render:html&#x27;,require(&#x27;./lib/miniHTML&#x27;));</span></span><br></pre></td></tr></table></figure>

<p>type 指的是过滤列表，详情看官方文档，<a href="https://hexo.io/zh-cn/api/filter">here</a></p>
<p>callback指的是相应传参处理，…args参数，传递给内部的filter处理</p>
<p>options指的是对应的选项，具体，我也不太清楚，文档没那么细，慢慢摸索，也可以看 ide 是否有对应提示。</p>
<p>今天主要讲的是如何写出一个mini压缩过滤插件。</p>
<p>我这里options是priority的可选数字类型参数，它主要作用是负责优先级计算。</p>
<p>callback则是</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">(<span class="attr">result</span>:<span class="title class_">String</span>,<span class="attr">data</span>:&#123;</span><br><span class="line"> 	[<span class="attr">key</span>:<span class="title class_">String</span>]:<span class="built_in">any</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">text</span>:<span class="title class_">String</span>,</span><br><span class="line"> &#125;)=&gt;&#123;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>我在这里演示如何获取到它的参数数量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(...args)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>如果输出太多个，我们可以通过创建一个上下文变量来进行控制。</p>
<p>最简单的可能是这样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function">(<span class="params">..args</span>)=&gt;</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span>(count===<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args.<span class="property">lenght</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但我更喜欢这样，创建一个闭包作为上下文，最好是装饰器这样的，但显然不太可能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(count===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//do it</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h2><p>话题扯远了，让我们会到正规。</p>
<p>通过打印，我列出自己对这个函数的了解。</p>
<p>result 变量就是hexo输入给plugin 的utf-8 的文本字符串，也就是你的写的代码以字符串的形式。</p>
<p>data对象</p>
<p>​	path属性通过打印可以知道均为.html后缀文件。</p>
<p>​	text属性则是<code>underfined</code></p>
<p>​	…</p>
<p>这里data属性一些文本有点多，如果你需要你可以这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(data));</span><br></pre></td></tr></table></figure>

<p>然后慢慢查找它。</p>
<p>return string 就是返回的结果作为下一个result</p>
<h3 id="data：object"><a href="#data：object" class="headerlink" title="data：object"></a>data：object</h3><h4 id="page变量"><a href="#page变量" class="headerlink" title="page变量"></a>page变量</h4><table>
<thead>
<tr>
<th>label</th>
<th>desc</th>
<th>type</th>
</tr>
</thead>
<tbody><tr>
<td>tilte</td>
<td>标题</td>
<td>string</td>
</tr>
<tr>
<td>date</td>
<td>创建时间</td>
<td>Moment对象</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<h4 id="path-相对路径，没有加上根路径"><a href="#path-相对路径，没有加上根路径" class="headerlink" title="path 相对路径，没有加上根路径"></a>path 相对路径，没有加上根路径</h4><h4 id="url-绝对路径，网络路径"><a href="#url-绝对路径，网络路径" class="headerlink" title="url 绝对路径，网络路径"></a>url 绝对路径，网络路径</h4><h4 id="config配置对象，-config-yml对象"><a href="#config配置对象，-config-yml对象" class="headerlink" title="config配置对象，_config.yml对象"></a>config配置对象，_config.yml对象</h4><h4 id="theme配置对象，-config-yml对象"><a href="#theme配置对象，-config-yml对象" class="headerlink" title="theme配置对象，_config.yml对象"></a>theme配置对象，_config.yml对象</h4><h4 id="layout"><a href="#layout" class="headerlink" title="layout?"></a>layout?</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">layout</span><br></pre></td></tr></table></figure>



<h4 id="env"><a href="#env" class="headerlink" title="env"></a>env</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">args</span>: &#123; <span class="attr">_</span>: [] &#125;,</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">safe</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">silent</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">env</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;6.2.0&#x27;</span>,</span><br><span class="line">  <span class="attr">cmd</span>: <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">  <span class="attr">init</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="view-dir"><a href="#view-dir" class="headerlink" title="view_dir"></a>view_dir</h4><h4 id="site"><a href="#site" class="headerlink" title="site"></a>site</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">posts</span>: _Query &#123;</span><br><span class="line">    <span class="attr">data</span>: [</span><br><span class="line">      [_Document], [_Document],</span><br><span class="line">      [_Document], [_Document],</span><br><span class="line">      [_Document], [_Document],</span><br><span class="line">      [_Document], [_Document],</span><br><span class="line">      [_Document], [_Document],</span><br><span class="line">      [_Document]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">length</span>: <span class="number">11</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">pages</span>: _Query &#123;</span><br><span class="line">    <span class="attr">data</span>: [</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">length</span>: <span class="number">6</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">categories</span>: _Query &#123;</span><br><span class="line">    <span class="attr">data</span>: [</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">length</span>: <span class="number">7</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tags</span>: _Query &#123;</span><br><span class="line">    <span class="attr">data</span>: [</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document],</span><br><span class="line">      [_Document]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">length</span>: <span class="number">6</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">menu</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;主页&#x27;</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;归档&#x27;</span>: <span class="string">&#x27;/archives/&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;分类&#x27;</span>: <span class="string">&#x27;/categories/&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;标签&#x27;</span>: <span class="string">&#x27;/tags/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="p"><a href="#p" class="headerlink" title="_p"></a>_p</h4><p><code>[Function (anonymous)]</code></p>
<h5 id="tips-1"><a href="#tips-1" class="headerlink" title="tips:"></a>tips:</h5><p>nodejs如何打印函数呢？</p>
<p>我们可以利用toString方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funciton.<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure>

<p>哈哈，突然想起来它是内部函数。</p>
<h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>布尔值 true&#x2F;false</p>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>这是极简版代码，具体配置我还需要多多研究，它已经成功上传到服务器了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;minify&#125; = <span class="built_in">require</span>(<span class="string">&#x27;html-minifier&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">str, data</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> options=<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">html_minifter</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123;path&#125;=data;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">minify</span>(str,&#123;<span class="attr">caseSensitive</span>:<span class="literal">true</span>,<span class="attr">collapseWhitespace</span>:<span class="literal">true</span>,<span class="attr">removeAttributeQuotes</span>:<span class="literal">true</span>,<span class="attr">removeCommentsL</span>:<span class="literal">true</span>,<span class="attr">minifyJS</span>:<span class="literal">true</span>,<span class="attr">minifyCSS</span>:<span class="literal">true</span>,...options&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="有缘更新"><a href="#有缘更新" class="headerlink" title="有缘更新"></a>有缘更新</h2>]]></content>
      <categories>
        <category>web</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li>Github</li>
<li>Nestify</li>
<li>Hexo</li>
<li>Ayer</li>
</ul>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>hexo博客部署</title>
    <url>/2022/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="使用-CDN-加速你的-GitHub-Pages-网站"><a href="#使用-CDN-加速你的-GitHub-Pages-网站" class="headerlink" title="使用 CDN 加速你的 GitHub Pages 网站"></a>使用 CDN 加速你的 GitHub Pages 网站</h1><p><strong>感谢</strong></p>
<ul>
<li>云游君！： <a href="https://www.yunyoujun.cn/posts/use-cdn-speed-up-site/">使用 CDN 加速你的 GitHub Pages 网站</a></li>
<li><a href="https://blog.csdn.net/hl_java/article/details/83989727">DNS术语中的CNAME、A、MX、TTL名词解释</a></li>
<li><a href="https://blog.csdn.net/huiruwei1020/article/details/107728435">利用CDN加速GithubPage访问速度</a></li>
<li><a href="https://app.netlify.com/">免费网站部署</a></li>
</ul>
<hr>
<p><strong>记录</strong></p>
<ol>
<li><p>GitHub登陆验证过程</p>
<p>采用跳转到验证</p>
</li>
</ol>
<p><strong>词汇</strong></p>
<p>FreeLancer自由职业者</p>
<p>Hobby developer业余爱好者</p>
<p>Other其他者</p>
<p>overview概述</p>
<p>permission准许</p>
<p>Verify验证</p>
<p><strong>术语</strong></p>
<ul>
<li>DNS(域名)</li>
</ul>
<ol>
<li>A(Address)记录是用来指定主机名（或域名）对应的IP地址记录，绑定Web Server</li>
<li>MAX(Mail exchanger)邮件路由记录，绑定Mail Server。</li>
<li>CNAME(Canonical name)别名记录，多个域名指向同一个ip。</li>
<li>TTL(Time To Line)生存时间，指的是对未知域名记录的缓存存在时间，缓存策略。</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
        <category>hexo</category>
        <category>部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建日志</title>
    <url>/2022/hexo%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>hexo 搭建过程，部分记录,笔记，零碎。</p>
<p>在整理途中，发现一些内容其实是摘抄，有的还比较长，而且还抄了一半。</p>
<p>つ﹏⊂</p>
<p>所以为脸面和整洁，我决定更多以链接形式的，这里更多的是一些使用bug 或者体会心得。</p>
<hr>
<h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><ol>
<li><a href="https://blog.csdn.net/weixin_54880923/article/details/115319991">yml</a></li>
<li><a href="https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/#yaml">yml,in,markdown</a></li>
<li><a href="https://blog.csdn.net/weixin_42305648/article/details/114733118">代码高亮</a></li>
<li><a href="https://www.jianshu.com/p/65ab196bef04">代码高亮2</a></li>
<li><a href="https://www.jianshu.com/p/43eb0819f51a"><code>Hexo</code>数据文件功能添加友情链接</a></li>
<li><a href="https://blog.csdn.net/weixin_33857230/article/details/91474562"><code>Hexo</code> 添加分类及标签</a></li>
<li><a href="https://hexo.io/zh-cn/"><code>Hexo</code></a></li>
<li><a href="https://markdown.com.cn/"><code>Markdown</code></a></li>
</ol>
<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h2 id="markdown-语法"><a href="#markdown-语法" class="headerlink" title="markdown 语法"></a>markdown 语法</h2><p>[^markdown]: suppurt html,css.js in it.</p>
<ul>
<li>代码块</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="code">```language</span></span><br><span class="line"><span class="code">code</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缩退 <code>shift+tab</code></li>
<li><code>YAML Front Matter</code>在 <code>Typora</code>下第一行中文标题打字会跳，解决方法是：先输入一个英文单词，然后再输入中文，然后删除英文即可。</li>
</ul>
<h2 id="yaml-语法"><a href="#yaml-语法" class="headerlink" title="yaml 语法"></a>yaml 语法</h2><ul>
<li><p>普通键值对</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备注</span></span><br><span class="line"><span class="attr">key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure></li>
<li><p>对象键值对</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">person：</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">无为</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> &#123;</span><br><span class="line">   <span class="attr">key:</span> <span class="string">value</span>,</span><br><span class="line">   <span class="attr">key:</span> <span class="string">value</span></span><br><span class="line">   &#125;   </span><br></pre></td></tr></table></figure>
</li>
<li><p>数组键值对   </p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="bullet">-</span> <span class="string">value</span> <span class="bullet">-</span> <span class="string">value</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> [<span class="string">value</span>,<span class="string">value</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> [&#123;<span class="attr">key:</span> <span class="string">value</span>&#125;,&#123;<span class="attr">key:</span> <span class="string">value</span>&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2></li>
</ul>
<ol>
<li><p>打包没有发现Hexo语法高亮<br> 尝试其他代码块,markdown语法编译器可以高亮，但hexo打包没有高亮&#x3D;&gt;step1<br> 打包没有对应的样式包&#x3D;&gt;step 2<br> 浏览器样式区别对比&#x3D;&gt;step 3<br> 解决了，过程里发现自己在之前关闭高亮设置，hexo clean，hexo server&#x3D;&gt;step 4</p>
</li>
<li><p>Hexo markdown 代码块多行字体显示不全</p>
<p> 浏览器排查，发现是padding属性导致字体显示空间错误。&#x3D;&gt;step 1</p>
<p> 配置没有开启多行&#x3D;&gt; step 2</p>
</li>
<li><p>做笔记最好整洁好看。——整理的≧ ﹏ ≦</p>
</li>
<li><p>在一个while判断的时候，只要循环条件不被打破，就无法history.back();<br> 问题解决了，明明我会的的，哼！</p>
<p> BOM API is belong to async，and while is a sync code,now if you wan to make it work frist you should break it or make it can’t work.</p>
</li>
<li><p>低级错误对着在线发布页面测试</p>
</li>
</ol>
<hr>
<h1 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h1><p>分类：具有顺序和层次这一概念，即需要逻辑层次。<br>        标签：则没有顺序和层次，不需要逻辑层次。</p>
<h2 id="创建选项"><a href="#创建选项" class="headerlink" title="创建选项"></a>创建选项</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page[layout] categories/tags</span><br></pre></td></tr></table></figure>
<h2 id="追加选项"><a href="#追加选项" class="headerlink" title="追加选项"></a>追加选项</h2><p>在生成的配置文件里追加type categories&#x2F;tags，如果是有配置化的布局，还可以加入layout配置。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> []</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> []</span><br><span class="line"><span class="section">layout: </span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<h2 id="文章使用"><a href="#文章使用" class="headerlink" title="文章使用"></a>文章使用</h2><p>在 模板文件夹  (scaffolds) 可以直接配置后续使用命令即可创建 <code>hexo new scaffolds_folderName postName</code></p>
<pre><code>在文章里追加相应属性，categories/tags：- 属性1 -属性2
</code></pre>
<hr>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ol>
<li>生成文件<br> hexo new [layout] fileName</li>
<li>草稿<br> hexo publice [layout] [title]</li>
<li>模板<br> 在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件。<br> 以下是您可以在模版中使用的变量：<br> layout，title，date</li>
<li>文章更新<br> _congfig.yml updated:true,ejs使用变量接受，应该是post.updated</li>
</ol>
<h2 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h2><p>post&#x2F;source&#x2F;page&#x3D;&gt;source&#x2F;_post\source\source&#x2F;_drafs</p>
<h2 id="支持格式"><a href="#支持格式" class="headerlink" title="支持格式"></a>支持格式</h2><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p>
<hr>
<h1 id="标签插件语法"><a href="#标签插件语法" class="headerlink" title="标签插件语法"></a>标签插件语法</h1><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><style>
    #logo{
        font-size:10px;
    }
</style>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><ol>
<li>layout目录,layout.ejs为主体框架,partial为子目录</li>
<li><code>&lt;span id=&quot;logo&quot;&gt;&lt;%= title %&gt;&lt;/span&gt;</code>任意parial的模板header.ejs</li>
<li><code>&lt;%- partial(&#39;partial/header&#39;, &#123;title: &#39;Hello World&#39;&#125;) %&gt;</code>调用</li>
</ol>
<h1 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h1><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul>
<li><p>在实现文件加密，<code>ejs</code>的<code>JavaScript</code>标签不能内嵌一些变量元素，可能我没有深入学习，我采用另外一种迂回方案，就是<code>dom</code>，和传统组件以及<code>jsonp</code>技术类似获取变量元素。</p>
</li>
<li><p>在阅读主题时发现另一种js用esj语法变量的方法，之前可能没有加&#x3D;&#x2F;-，还有字符串,导致无效，目前看来只适合字符串形式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	const str=&quot;&lt;%= post.password %&gt;&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo深入再学习</title>
    <url>/2022/hexo%E6%B7%B1%E5%85%A5%E5%86%8D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://juejin.cn/post/6844903469669679117">hexo设计模式探索</a></p>
<p><a href="https://www.jianshu.com/p/56b9cb8ac2ea">node之proce模块</a></p>
<p><a href="https://blog.csdn.net/fangxuan1509/article/details/107469465">minimist命令行引擎</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf原型组合</a></p>
<p><a href="https://baike.baidu.com/item/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E"> 模板引擎</a></p>
<p><a href="http://nodejs.cn/api/vm.html">nodejs vm模块</a></p>
<p><a href="https://www.jianshu.com/p/f935e5459c49">简书-个人学习</a></p>
<h1 id="主题文件夹功能探索"><a href="#主题文件夹功能探索" class="headerlink" title="主题文件夹功能探索"></a>主题文件夹功能探索</h1><h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><p><strong>ejs</strong>文件或者其他模板文件。</p>
<h3 id="条件函数使用"><a href="#条件函数使用" class="headerlink" title="条件函数使用"></a>条件函数使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%= is_post()?&quot;class1&quot;:&quot;class2&quot; %&gt;</span><br></pre></td></tr></table></figure>

<h1 id="HEXO设计模式笔记"><a href="#HEXO设计模式笔记" class="headerlink" title="HEXO设计模式笔记"></a>HEXO设计模式笔记</h1><p>静态网站生成器以及api文档。</p>
<h2 id="框架特色"><a href="#框架特色" class="headerlink" title="框架特色"></a>框架特色</h2><p>​	nodejs运行环境，速度块，扩展能力强，插件丰富，主题开发，一键部署。</p>
<h2 id="盲点"><a href="#盲点" class="headerlink" title="盲点"></a>盲点</h2><h3 id="process-argv"><a href="#process-argv" class="headerlink" title="process.argv"></a>process.argv</h3><p>process.argv返回一个包含所有启动Nodejs的参数，第一个参数为process.execPath,第二个为当前执行js文件的路径，其它为其它命令行参数。</p>
<h3 id="minimist"><a href="#minimist" class="headerlink" title="minimist"></a>minimist</h3><p>轻量级nodejs命令行解析引擎。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args=<span class="title function_">minimist</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> cmd=args.<span class="property">_</span>.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">var</span> hexo=<span class="keyword">new</span> <span class="title class_">Hexo</span>();</span><br><span class="line">hexo.<span class="title function_">init</span>();</span><br><span class="line">hexo.<span class="title function_">call</span>(cmd,args);</span><br></pre></td></tr></table></figure>

<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>The store means  a db in program.</p>
<p>作者的意思大概是事件逻辑存储在store，依靠store进行耦合工作。</p>
<h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><p>函数的意思，或者说可以通过它来执行某些逻辑。</p>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><h3 id="node-vm"><a href="#node-vm" class="headerlink" title="node vm"></a>node vm</h3><p>v8虚拟机，无安全机制，所以使用者自行担保安全机制。</p>
<h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><p>在命令行模块，Hexo选择使用minimist来解析命令行参数得到一个js对象，并建立一个Hexo实例并初始化，最后通过实例对象call方法传递命令行指令。</p>
<h2 id="Hexo入口模块设计"><a href="#Hexo入口模块设计" class="headerlink" title="Hexo入口模块设计"></a>Hexo入口模块设计</h2><p>采用构造-原型组合定义类，采用组合继承的方式继承Node的EventEmitter模块，相对简单的完成on与emit的发布订阅。</p>
<p>实例化阶段，保存所编译文件的存放路径，输出路径，以及其它脚本，插件，主题等所处的路径，保存环境变量，即命令行参数，版本信息号等基本信息。</p>
<p>创建扩展对象按不同功能进行分类，作用是创建store，用于注册句柄，获取句柄。</p>
<p>扩展类型控制台(Console)、部署器(Deployer)、过滤器(Filter)、生成器(Generator)、辅助函数(Helper)、处理器(Processor)、渲染引擎(Renderer)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hexo</span>(<span class="params">base,args</span>)&#123;</span><br><span class="line">    <span class="title class_">EventEmitter</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">public_dir</span>=path.<span class="title function_">join</span>(base,<span class="string">&#x27;public&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">source_dir</span>=path.<span class="title function_">join</span>(base,<span class="string">&#x27;source&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">extend</span>=&#123;</span><br><span class="line">        <span class="attr">console</span>:<span class="keyword">new</span> extend.<span class="title class_">Console</span>();</span><br><span class="line">        <span class="attr">generator</span>:<span class="keyword">new</span> extend.<span class="title class_">Generator</span>();</span><br><span class="line">    	<span class="attr">processor</span>:<span class="keyword">new</span> extend.<span class="title class_">Processor</span>();</span><br><span class="line">    	<span class="attr">renderer</span>:<span class="keyword">new</span> extend.<span class="title class_">Renderer</span>();</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//等同于Object.setPrototypeOf(Hexo.prototype,EventEmitter.prototype);</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).<span class="title function_">inherits</span>(<span class="title class_">Hexo</span>,<span class="title class_">EventEmitter</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>换句话说，扩展对象是个容器，一个事件注册机。</p>
<p>接下来要做的是Hexo初始化阶段，加载Hexo内置插件，不断增加扩容工作，以渲染引擎为例，向extend.renderer注册渲染过程处理函数，在其它模块中就可以很方便的从hexo的上下文去调用渲染。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Hexo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//加载内部插件</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/console&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/generator&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/processor&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/renderer&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//plugins/renderer注册渲染函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> renderer=hexo.<span class="property">extend</span>.<span class="property">renderer</span>;</span><br><span class="line">    renderer.<span class="title function_">register</span>(<span class="string">&#x27;swig&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./swig&#x27;</span>));</span><br><span class="line"> renderer.<span class="title function_">register</span>(<span class="string">&#x27;ejs&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./ejs&#x27;</span>));</span><br><span class="line"> renderer.<span class="title function_">register</span>(<span class="string">&#x27;yml&#x27;</span>,<span class="string">&#x27;josn&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./yaml&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用渲染器 </span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exprots</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">     <span class="keyword">var</span> renderer=hexo.<span class="property">extend</span>.<span class="property">renderer</span>;</span><br><span class="line">     <span class="keyword">return</span> renderer.<span class="title function_">get</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>hexo 还能加载外部插件,通过 npm 的方式存放在 node_module 或目录 script 里面，巧妙的是，插件内部无效引入 hexo 对象，可以直接hexo变量来访问上下文，正是由于框架采用 Node 中 vm 模块(Virtual Machine) 模块来加载 js 文件，相当于模板引擎实现原理中的new Function或者 eval 来解析并执行字符串代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载外部插件</span></span><br><span class="line"><span class="title class_">Hexo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">loadPlugin</span>=<span class="keyword">function</span>(<span class="params">path</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">script</span>)&#123;</span><br><span class="line">       script=<span class="string">`(function(hexo)&#123;`</span>+script+<span class="string">&#x27;&#125;)&#x27;</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">    retutn vm.<span class="title function_">runInThisContext</span>(script,path)(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Hexo编译模块设计"><a href="#Hexo编译模块设计" class="headerlink" title="Hexo编译模块设计"></a>Hexo编译模块设计</h2><p>预期用户命令接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>首先往 Hexo 扩展对象 Console 中注册 &#x3D;&#x3D;generate&#x3D;&#x3D; 函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">register</span>(<span class="string">&#x27;generate&#x27;</span>,<span class="string">&#x27;Generate static files&#x27;</span>,&#123;</span><br><span class="line">   <span class="attr">options</span>:[</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-d,--deloy&#x27;</span>,<span class="attr">desc</span>:<span class="string">&#x27;Deploy after generated&#x27;</span>&#125;,</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-f,--force&#x27;</span>,<span class="attr">desc</span>:<span class="string">&#x27;Force regenerate&#x27;</span>&#125;,</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-w,--watch&#x27;</span>,<span class="attr">dec</span>:<span class="string">&#x27;Watch file changes&#x27;</span>&#125;,</span><br><span class="line">   ]</span><br><span class="line">&#125;,<span class="built_in">require</span>(<span class="string">&#x27;/generate&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>generate 函数用于生成目标文件夹，从 Hexo 路由模块中取得所由需要生成目标文件的路径，调用fs输出文件，在此之前，首先对源文件进行预处理，把路径写入路由。由于Hexo本身设计的特点，源文件又分为内容和主题两部分，分别为放在 source 和theme文件夹中，所以得调用 process 函数分别对它们进行预处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    hexo.<span class="property">source</span>.<span class="title function_">process</span>();</span><br><span class="line">    hexo.<span class="property">theme</span>.<span class="title function_">process</span>();</span><br><span class="line">    routerList.<span class="title function_">forEach</span>(<span class="function"><span class="params">path</span>=&gt;</span><span class="title function_">writeFile</span>(path));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Hexo 抽象出一层公用模块用来管理所有处理器，命名为Box，相当于一个容器，统一管理处理器的添加删除执行监控，并分别为source和theme创建实列，Box原型如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">base</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">base</span>=base;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>=[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addProcessor</span>=<span class="keyword">function</span>(<span class="params">pattern,fn</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        pattern,</span><br><span class="line">        <span class="attr">process</span>:fn,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">process</span>=<span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">processor</span>=&gt;</span>processor.<span class="title function_">process</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了Box容器，接下来要做的就是往容器注入处理器，同样用插件形式往扩展对象extend中注册句柄，在注入到 Box 容器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> &#123;processor&#125;=hexo.<span class="property">extend</span>;</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="built_in">require</span>(<span class="string">&#x27;./asset&#x27;</span>)(hexo);</span><br><span class="line">    processer.<span class="title function_">register</span>(obj.<span class="property">pattern</span>,obj.<span class="property">process</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以markdown文件的处理为例，成功匹配到文件扩展名，调用hexo-font-matter利用正则表达式匹配解析文件，分离顶部元素据与主题内容，类似于gray-matter，把元数据与内容key&#x2F;value的形式转换为一个js对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">patter</span>:<span class="regexp">/\.md/</span>,</span><br><span class="line">        <span class="attr">process</span>:<span class="keyword">function</span>(<span class="params">path</span>)&#123;</span><br><span class="line">            <span class="title function_">readFile</span>(path,<span class="keyword">function</span>(<span class="params">err,content</span>)&#123;</span><br><span class="line">               <span class="keyword">var</span> data=<span class="built_in">require</span>(<span class="string">&#x27;hexo-front-matter&#x27;</span>)(content);</span><br><span class="line">                data.<span class="property">source</span>=path;</span><br><span class="line">                data.<span class="property">raw</span>=content;</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//markdown文件</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">title:hello,</span></span><br><span class="line"><span class="string">layout:home</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#hexo</span></span><br><span class="line"><span class="string">A</span> <span class="string">fast,simple&amp;porwerful</span> <span class="string">blog</span> <span class="string">framework</span></span><br></pre></td></tr></table></figure>

<p>解析成&#x3D;&gt;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">layout</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">_content</span>:<span class="string">&#x27;# Hexo\n fast,simple&amp;porwerful blog framework&#x27;</span>,</span><br><span class="line">    <span class="attr">source</span>:<span class="string">&#x27;README.md&#x27;</span>,</span><br><span class="line">    <span class="attr">raw</span>:<span class="string">`---\ntitile:hello\n---# Hexo\n fast,simple&amp;porwerful blog framework`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 下一步，Hexo定义过滤器的概念(Filter)的概念，借鉴于Wordpress，用于在模板渲染前后修改具体数据，也可以把它看成钩子，例如使用 marked 编译 markdown 文件内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo.<span class="title function_">execFilter</span>(<span class="params"><span class="string">&#x27;before_generate&#x27;</span>,<span class="keyword">function</span>(data)</span>)&#123;</span><br><span class="line">     hexo.<span class="property">render</span>.<span class="title function_">render</span>(&#123;</span><br><span class="line">        <span class="attr">text</span>:data.<span class="property">_content</span>,</span><br><span class="line">        <span class="attr">path</span>:data.<span class="property">source</span>,</span><br><span class="line">        <span class="attr">engine</span>:data.<span class="property">engine</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>转换后增加一条 content 属性，带有标签与类名的markdown html 片段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">layout</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">_content</span>:<span class="string">&#x27;# Hexo\n fast,simple&amp;porwerful blog framework&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>:<span class="string">&#x27;&lt;h1 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;Hexo&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;fast,simple&amp;porwerful blog framework&lt;/p&gt;&#x27;</span></span><br><span class="line">    <span class="attr">source</span>:<span class="string">&#x27;README.md&#x27;</span>,</span><br><span class="line">    <span class="attr">raw</span>:<span class="string">`---\ntitile:hello\n---# Hexo\n fast,simple&amp;porwerful blog framework`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到页面数据后，进入模板引擎渲染阶段，Hexo 本身并不带模板引擎，需要借助第三方库，如ejs，并通过一个适配器，把原接口转换为需求接口，向扩展对象extend.render中注册模板解析函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexok.<span class="property">extend</span>.<span class="property">renderer</span>.<span class="title function_">register</span>(<span class="string">&#x27;ejs&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="keyword">function</span>(<span class="params">data,locals</span>)&#123;</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>).<span class="title function_">render</span>(data,locals) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>模板引擎解析后的函数在hexo.theme对象中， 以文件名作为key，后续渲染只需要layout就能找到指定的渲染函数，注入locals变量(上面markdown解析后的js对象+扩展对象extend.helper定义变量，函数)，生成最终文本字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> view=hexo.<span class="property">theme</span>.<span class="title function_">getView</span>(data.<span class="property">layout</span>);</span><br><span class="line">view.<span class="title function_">render</span>(lcoals);</span><br></pre></td></tr></table></figure>

<p>最后通过Node fs 模块将内容输出public目标。</p>
<p>回顾所有的工作流程，可以看作是</p>
<p>cli&#x3D;&gt;hexo.init&#x3D;&gt;plugin.load&#x3D;&gt;process&#x3D;&gt;filter&#x3D;&gt;render&#x3D;&gt;generate</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>此外，Hexo还有很多优秀的设计模式</p>
<h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><p>Hexo 引入 json 数据库 warehouse ,也是作者自己开发的一个数据库驱动，api 和 Mongoose 相差无几。在架构中角色充当一个中介者，存储临时数据，或者持久化数据数据存储，如博客的发表时间，还可以作为缓存层，比对文件修改时间，跳过无修改文件的编译过程，减少二次编译的时间。</p>
<h3 id="异步方案"><a href="#异步方案" class="headerlink" title="异步方案"></a>异步方案</h3><p>在大量异步回调文件会造成代码阅读性下降。</p>
<p>Hexo 引入 Promise 库  bindBrid,  内置丰富 API，</p>
<p>很方便的处理异步的流程控制，如使用 Promise.promisify(require(‘fs’).readFile)可以原生 fs 模块包装成一个promise对象。</p>
<h3 id="通用日志模块"><a href="#通用日志模块" class="headerlink" title="通用日志模块"></a>通用日志模块</h3><p>把Log划分为六个级别，’TRACE’,’DEBUG’,’INFO,’WARN’,’FATAL’,不同级别输出不同的格式与颜色(chalk) ,并提供命令含接口，如果带有–debug字段，则Log自动降级为’TRACE’。</p>
<hr>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>_config.yml</p>
<p>markdown.md Front-matter</p>
<h3 id="多语言支持"><a href="#多语言支持" class="headerlink" title="多语言支持"></a>多语言支持</h3><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>基本就是网站布局，如果你想要亲手制作一个Hexo的主题，那么就要深入了解这块内容。每一个主题至少都要包含index模板，下面是各页面对应的模板名称：</p>
<ul>
<li>index 首页</li>
<li>post 文章</li>
<li>page 分页</li>
<li>archive 归档</li>
<li>category 分类归档</li>
<li>tag 标签归档</li>
</ul>
<h5 id="Layouts-布局"><a href="#Layouts-布局" class="headerlink" title="Layouts 布局"></a>Layouts 布局</h5><p>如果页面结构类似，模板之间都包含相同结构，可以使用布局功能让模板共享相同结构。一个布局文件必须要能包含显示body变量内容，如此一来模板内容才能显示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- index.ejs --&gt;</span><br><span class="line">index</span><br><span class="line">&lt;!-- layout.ejs --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;%- body %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>生成结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        index</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每个模板都默认使用 <strong>layout</strong> 布局，你可在文章的前置申明指定布局。比如 post 或者 page 或者设为 false 来关闭布局功能。如果不填默认是 post ，这个在_config.yml中设置默认值，你甚至可以在布局中中再使用其它布局来建立嵌套布局。</p>
<h5 id="Pratials-局部模板"><a href="#Pratials-局部模板" class="headerlink" title="Pratials 局部模板"></a>Pratials 局部模板</h5><p>局部模板可以让你在不同的模板中分享相同的组件，例如Header，Footer，Sidebar侧边栏等，可以利用局部模版功能将各个组件分割独立的文件，便于维护。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- partial/header.ejs--&gt;</span><br><span class="line">&lt;h1 id=&quot;logo&quot;&gt;</span><br><span class="line">    &lt;%= config.title %&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;!-- index.ejs--&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">    Home page</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>生成就是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    My Site</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    Home page</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。</p>
<h5 id="Local-Variables-本地变量"><a href="#Local-Variables-本地变量" class="headerlink" title="Local Variables 本地变量"></a>Local Variables 本地变量</h5><p>这里的变量指的是针对局部模板来使用的，你可以在局部模块中指定局部变量来进行传递。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--partial/header.ejs--&gt;</span><br><span class="line">&lt;h1 id=&quot;logo&quot;&gt;</span><br><span class="line">    &lt;%- title %&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;!--index.ejs--&gt;</span><br><span class="line">&lt;%- partial(&#x27;partial/header&#x27;,&#123;title:&#x27;Hello,World&#x27;&#125;) %&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">    Home page</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>生成后就是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    Home page</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个也不难理解，就是传递变量的过程。</p>
<h5 id="Optimization-最优化"><a href="#Optimization-最优化" class="headerlink" title="Optimization 最优化"></a>Optimization 最优化</h5><p>假如你的主题特别复杂，因为要生成的文件过于庞大，这样导致hexo 生成性能下降，除了优化主题外，你可以通过 Fragment Caching 局部缓存的功能来处理。它主要的功能是缓存局部的内容，减少文件查询。</p>
<p>常用在哪些变动很少的模块。例如Header、Footer。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- fragment_cache(&#x27;header&#x27;,function()&#123;</span><br><span class="line">   retutn `&lt;header&gt;&lt;/header&gt;` </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果使用局部模板的话，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- partial(&#x27;header&#x27;,&#123;&#125;,&#123;cache:true&#125;);</span><br></pre></td></tr></table></figure>

<p>但是需要注意的是，如果开启了<code>relativet1_link</code>参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。</p>
<h4 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h4><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><ul>
<li><code>site</code>网站变量</li>
<li><code>site.posts</code> 所有文章</li>
<li><code>site.pages</code>所有分类</li>
<li><code>site.categories</code>所有分类</li>
<li><code>site.tags</code>所有标签</li>
<li><code>page</code>针对改页面的内容以及申明前置所设定的变量</li>
<li><code>config</code>配置文件中的变量</li>
<li><code>theme</code>配置文件中的变量</li>
<li><code>_</code>lodash函数库</li>
<li><code>path</code>当前页面的路径(不含根路径)</li>
<li><code>url</code>页面完整</li>
<li><code>env</code>环境变量</li>
</ul>
<h5 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h5><p><strong>Page</strong> 这里指的是 <code>hexo new page</code>创建的页面</p>
<ul>
<li><code>page.title</code>文章标题</li>
<li><code>page.date</code>文章建立日期</li>
<li><code>page.updated</code>文章更新日期</li>
<li><code>page.comments</code>留言是否开启</li>
<li><code>page.layout</code>布局名称</li>
<li><code>page.content</code>文章完整内容</li>
<li><code>page.excerpt</code>文章摘要</li>
<li><code>page.more</code>除了摘要的其它内容</li>
<li><code>page.source</code>文章原始路径</li>
<li><code>page.full_source</code>文章完整原始路径</li>
<li><code>page.path</code>文章网址(不含根路径)，通常在主题中使用 <code>url_for(page.path)</code></li>
<li><code>page.permalink</code>文章永久网址</li>
<li><code>page.prev</code>上一章，如果此为第一篇文章则为 <code>null</code></li>
<li><code>page.next</code>下一章，如果此为最后一篇文章则为 <code>null</code></li>
<li><code>page.raw</code>文章的原始内容</li>
<li><code>page.photos</code>文章的照片(用于相册)</li>
<li><code>page.link</code>文章的外链(用于链接文章)</li>
</ul>
<p><strong>Post</strong>这里指的是文章页面，与page布局相同，添加如下变量：</p>
<ul>
<li><code>page.pulished</code>文章非草稿为 <code>true</code></li>
<li><code>page.categories</code>文章分类</li>
<li><code>page.tags</code>文章的标签</li>
</ul>
<p><strong>首页 index</strong></p>
<ul>
<li><code>page.per_page</code>每一页显示的文章数</li>
<li><code>page.total</code>文章数量</li>
<li><code>page.current</code>  当前页码</li>
<li><code>page.current_url</code>当前页的URL </li>
<li><code>page.posts</code>当前页的文章ge</li>
<li><code>page.prev</code>前一页页码，如果为第一页，该值为0</li>
<li><code>page.prev_link</code>前一页URL，如果为第一页，则为“</li>
<li><code>page.next_link</code>后一页URL，如果为最后一页，则为”</li>
<li><code>page.path</code>当前不含根路径网址，通常在主题中使用 <code>url_for(page.path)</code></li>
</ul>
<p><strong>归档页 archive</strong></p>
<p>与<code>index</code>布局相同，但是新增如下变量</p>
<ul>
<li><code>archive</code>为 <code>true</code></li>
<li><code>year</code>归档年份</li>
<li><code>month</code>归档月份</li>
</ul>
<p><strong>分类页 category</strong></p>
<p>与 <code> index</code> 布局相同，但是新增如下变量</p>
<ul>
<li><code>category</code>分类名称</li>
</ul>
<p><strong>标签页</strong></p>
<p>与 <code> index</code> 布局相同，但是新增如下变量</p>
<ul>
<li><code>tag</code>标签名称</li>
</ul>
<h4 id="帮助函数"><a href="#帮助函数" class="headerlink" title="帮助函数"></a>帮助函数</h4><p>帮助函数用于在模板中快速插入内容</p>
<h5 id="url"><a href="#url" class="headerlink" title="url"></a>url</h5><ol>
<li><p><code>url_for</code>返回一个带root路径的，用法 <code>&lt;%- url_for(path) %&gt;</code></p>
</li>
<li><p><code>relative_url</code>返回from相对的to路径，用法 <code>&lt;%- relative_url %&gt;</code></p>
</li>
<li><p><code>gravater</code>插入Gravatar图片，用法：<code>&lt;%- gravagtar(email,[size]) %&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- gravatar(&#x27;a@abc.com&#x27;) %&gt;</span><br><span class="line"> // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787</span><br><span class="line">&lt;%- gravatar(&#x27;a@abc.com&#x27;,40) %&gt;</span><br><span class="line"> // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><ol>
<li><p><code>css</code>载入CSS文件。用法：<code>&lt;% css(path,...) %&gt;</code>,<code>path</code>可以是数据或者字符串，如果 <code>path</code>开头不是 <code>/</code> 或者任何协议，则会自动加上根路径，如果没有 <code>.css</code>扩展名，也会自动加上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- css(&#x27;style.css&#x27;) %&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">   </span><br><span class="line">&lt;%- css([&#x27;style.css&#x27;, &#x27;screen.css&#x27;]) %&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>js</code> 载入 JavaScript 文件。用法：<code>&lt;%- js(path, ...) %&gt;</code>，<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code>或任何协议，则会自动加上根路径；如果后面没有加上 <code>.js</code>扩展名的话，也会自动加上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- js(&#x27;script.js&#x27;) %&gt;</span><br><span class="line">// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;%- js([&#x27;script.js&#x27;, &#x27;gallery.js&#x27;]) %&gt;</span><br><span class="line">// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>link_to</code> 插入链接。用法：<code>&lt;%- link_to(path, [text], [options]) %&gt;</code>，<code>options</code>参数有：</p>
<ul>
<li><p><code>external</code> 在新窗口中打开链接，默认值为false</p>
</li>
<li><p><code>class</code> Class名称，也就是html标签a的class名</p>
</li>
<li><p><code>id</code> ID名，也就是html标签a的id名</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;, &#x27;Google&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;, &#x27;Google&#x27;, &#123;external: true, class: &quot;link&quot;&#125;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>mail_to</code> 插入电子邮件链接。用法：<code>&lt;%- mail_to(path, [text], [options])%&gt;</code>，<code>options</code>参数有：</li>
</ol>
<ul>
<li><code>class</code> Class名称，也就是html标签a的class名</li>
<li><code>id</code> ID名，也就是html标签a的id名</li>
<li><code>subject</code> 邮件主题</li>
<li><code>cc</code> 抄送（CC）</li>
<li><code>bcc</code> 密送（BCC）</li>
<li><code>body</code> 邮件内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- mail_to(&#x27;a@abc.com&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- mail_to(&#x27;a@abc.com&#x27;, &#x27;Email&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;  </span><br></pre></td></tr></table></figure>

<p>5.<code>image_tag</code> 插入图片。用法：<code>&lt;%- image_tag(path, [options]) %&gt;</code>，<code>options</code>参数有：</p>
<ul>
<li><code>class</code> Class名称，也就是html标签a的class名</li>
<li><code>id</code> ID名，也就是html标签a的id名</li>
<li><code>alt</code> 替代文字</li>
<li><code>width</code> 宽度</li>
<li><code>height</code> 高度</li>
</ul>
<p>基本上就是<code>img</code>标签里的属性值。</p>
<p>6.<code>favicon_tag</code>插入favicon。用法：<code>&lt;%- favicon_tag(path) %&gt;</code></p>
<p>7.<code>feed_tag</code> 插入feed链接。用法：<code>&lt;%- feed_tag(path, [options]) %&gt;</code>，参数有：<code>title</code>和<code>type</code>(默认值为atom)</p>
<h5 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h5><ul>
<li><code>is_current</code> 判断<code>path</code>是否符合目前页面的网址。<code>&lt;%- is_current(path, [strict]) %&gt;</code></li>
<li><code>is_home</code> 判断目前是否为首页。</li>
<li><code>is_post</code> 检查目前是否为文章。 <code>&lt;%- is_post() %&gt;</code></li>
<li><code>is_archive</code> 检查目前是否为存档页面。<code>&lt;%- is_archive() %&gt;</code></li>
<li><code>is_year</code> 检查目前是否为年度归档页面。<code>&lt;%- is_year() %&gt;</code></li>
<li><code>is_month</code>检查目前是否为月度归档页面。&lt;%- is_month() %&gt;</li>
<li><code>is_category</code>检查目前是否为分类归档页面。&lt;%- is_category() %&gt;</li>
<li><code>is_tag</code>检查目前是否为标签归档页面。<code>&lt;%- is_tag() %&gt;</code></li>
</ul>
<h5 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h5><ul>
<li><code> trim</code>清楚字符串开头和结尾的空格。<code>&lt;%- trim(string) %&gt; </code></li>
<li><code>strip_html</code>清楚字符串中HTML标签。<code>&lt;%- strip_html(string) %&gt;</code></li>
<li><code>titlecase</code>把字符串转换为Title case。<code>&lt;%- titlecase(string) %&gt;</code></li>
<li><code>markdown</code>使用 Markdown 解析字符串。<code>&lt;%- markdown(string) %&gt;</code></li>
<li><code>render</code> 解析字符串。<code>&lt;%- render(str, engine, [options]) %&gt;</code></li>
<li><code>word_wrap</code>使每行的字符串长度不超过 <code>length</code>。<code>length</code> 预设为 80。<code>&lt;%- word_wrap(str, [length]) %&gt;</code></li>
<li><code>truncate</code>移除超过 <code>length</code> 长度的字符串。<code>&lt;%- truncate(text, length) %&gt;</code></li>
</ul>
<h5 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h5><ul>
<li><code>partial</code>载入其它模板文件，你可在 <code>locals</code>设定变量。<code>&lt;%- partial(layout,[locals],[options]) %&gt;</code></li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>cache</td>
<td>缓存，使用Fragment cache</td>
<td><code>false</code></td>
</tr>
<tr>
<td>only</td>
<td>限制局部变量，在模板中只能使用 <code>locals</code>中设定的变量</td>
<td><code>false</code></td>
</tr>
</tbody></table>
<ul>
<li><code>fragment_cache</code>局部缓存。它储存局部内容，下次使用时就能直接使用缓存。<code>&lt;%- fragment_cache(id, fn);</code></li>
</ul>
<h5 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h5><p><code>date</code>插入的格式化的日期，Unix，ISO字符串，Date对象或Moment对象。</p>
<p><code>format</code>默认为 <code>date_format</code>配置信息。</p>
<p><code>&lt;%- date(Date.now(),&#39;YYYY/M/D) %&gt;</code></p>
<p><code>date_xml</code>插入XML格式的日期。数据格式和调用同上。</p>
<p><code>time</code>&#x2F;<code>full_date</code></p>
<h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><ul>
<li><code>list_categories</code>插入分类列表，<code>&lt;%- list_categories([categories], [options]) %&gt;</code></li>
<li><code>list_tags</code></li>
<li><code>list_archives</code></li>
<li><code>lsit_posts</code></li>
<li><code>tagclound</code><strong>想要学习</strong></li>
<li><code>paginator</code>插入分页连接</li>
<li><code>search_form</code>插入谷歌搜索</li>
<li><code>number_format</code></li>
<li><code>open_graph</code></li>
<li><code>toc</code></li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>hexo 的生命周期</p>
<h4 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h4><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>上面提到的所有<code>Options</code>参数一定要按照<code>json</code>的格式来书写；</p>
]]></content>
      <categories>
        <category>web</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs个人工具编写错误汇总</title>
    <url>/2022/nodejs%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%BC%96%E5%86%99%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><ol>
<li>fsPromise.readDir path 报错：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">The</span> <span class="string">&quot;path&quot;</span> argument must be <span class="keyword">of</span> type string or an instance <span class="keyword">of</span> <span class="title class_">Buffer</span> or <span class="variable constant_">URL</span>. <span class="title class_">Received</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>
错误的原因是空字符进入readDir</li>
<li>无后缀名文件被识别成文件夹进入读取文件路径里面<br>暂时解决方法写了简单地忽略判定，如果写负责可以加一个配置，以及读取，以及生成相应功能。<br>另外有空地话，可以多研究fs模块，或者采用忽略异常处理。</li>
<li>使用函数解构对象参数至少需要一个对象{}，否则会报<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TypeError</span>: <span class="title class_">Cannot</span> read properties <span class="keyword">of</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li>
<li>fs&#x2F;Promise输出二进制流，使用encoding属性配置对应字符集即可。</li>
<li>reduce&#x2F;filter忘记如何写串行了，好想用RX。</li>
</ol>
<h1 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h1><ol>
<li>多路径扁平读取文件夹整合输出所在路径，一维数组。</li>
<li>路径深读读取并生成路径，一维数组。</li>
<li>一维路径数组识别文件和文件夹并输出，有Bug，暂时不能识别无后缀文件。</li>
<li>一维文件数组识别转文件格式key的路径对象。</li>
<li>简单地读取提供打包插件功能的函数，应该设计成实体对象。</li>
</ol>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><table>
<thead>
<tr>
<th>name</th>
<th>desc</th>
</tr>
</thead>
<tbody><tr>
<td><code>os</code>操作系统</td>
<td>提供系统\CPU\NETWORK\进程优先级信息 ……</td>
</tr>
<tr>
<td><code>process</code>进程</td>
<td>提供<code>nodejs</code>进程信息</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>代码部分过程化，更加建议采用语义化，</p>
<p>面向对象缺失不太好。</p>
<p>部分变量名字单复数造成写代码易错，建议统一把复数形式放最后面。</p>
<p>函数式更注重的是数据合成，面向对象更注重对象解耦。</p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>study-from-云游君</title>
    <url>/2022/study-from-%E4%BA%91%E6%B8%B8%E5%90%9B/</url>
    <content><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://www.yunyoujun.cn/">云游君的小站</a></p>
<p><a href="https://blog.csdn.net/dcl199728/article/details/123380485"><code>css</code>中的<code>var()</code>和<code>:root</code></a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/var">mdn</a></p>
<p><a href="https://diff.blog/">Diff.Blog</a><br>感谢Diff.Blog收录。</p>
<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><ol>
<li><p><code>:root</code>里面可以设置公用颜色属性 <code>--bg-color:#fff</code><br>然后颜色用 <code>var(--bg-color)</code>;</p>
</li>
<li><p>background-img设置渐进色,linear&#x2F;radio gradient;</p>
</li>
<li><p>鼠标悬浮显示特效</p>
<h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3></li>
</ol>
<p>文字左右两角悬浮</p>
<p>this is Effect 效果 ↓</p>
<p class="hover-text"  style="text-align:center;">Hello,World.click Here you can know it's workd.</p>
首先，我们用一种样式名

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-hover&quot;</span>&gt;</span></span><br><span class="line">   //text </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义两个伪类元素，让其获得边框,  并绝对定位该元素于悬浮触发器元素，设置过渡属性0.3s,运动采用贝塞尔曲线,透明度为0，变形属性设置移动。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-hover</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-hover</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.text-hover</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    position:absolute;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">10px</span>;<span class="attribute">height</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.17</span>,<span class="number">0.67</span>,<span class="number">0.05</span>,<span class="number">1.29</span>);</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-text</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">10px</span>,<span class="number">10px</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-text</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">10px</span>,-<span class="number">10px</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置悬浮样式，触发过度效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hover-text</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,<span class="selector-class">.hover-text</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>今天我想学的东西好多好多，但自己确实只能专注一件事情比较好。</p>
<p>鼠标悬停下划线动画</p>
<p>this is Effect 效果 ↓</p>
<p><span class="hover-a-1">click here!</span></p>
<p>探索，最初，我直接实现了个下划线版，下边框版但有点差异。很好，牛角尖来了，(￣▽￣)”</p>
<p>接招吧云游君，第一招。</p>
<p>浏览器注入内联样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border</span>:none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>竟然不是这个方法。(￢︿̫̿￢☆)</p>
<p>看招，查看脚本事件法。</p>
<p>竟然没有。</p>
<p>还有一招取消属性法。</p>
<p>看我点点，咦。相对定位取消后竟然没有了，让我看看。</p>
<p>点点点！一阵疯狂的输出，终于发现了是绝对定位的的伪类元素。</p>
<p>我怎么就没想呢？</p>
<p>不皮了，接下来就是教程时间：</p>
<p>首先需要定义于元素相对定位，</p>
<p>其次加入伪元素：before或者after 设置绝对定位，和宽度为0，以及过渡属性，时间自定义，云游君用的是.2 s 。</p>
<p>类型可以写width，或者 all 颜色的话自定义。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hover-a-1</span>:&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-a-1</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>:absoulte;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">transition</span>:.<span class="number">8s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我发生了一个小错误，就是忘记写width，导致最终效果没有变化。</p>
<p>然后就是设置悬浮属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hover-a-1</span>  <span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>再临梦中等雨</title>
    <url>/2022/%E5%86%8D%E4%B8%B4%E6%A2%A6%E4%B8%AD%E7%AD%89%E9%9B%A8/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又一次10：30左右的早餐时间。从七点半到现在我都在改进自己的博客系统，中间出了cdn资源请求失败导致长时间白屏渲染。</p>
<p>这个问题说小也不算小，说大也不算大，采用错误边界处理和降级CDN策略就能解决大半个问题，但我也不太想搞，因为量级很小，方案的话又需要投入钱财和精力。</p>
<p>这次刚好是吃完早餐——肉夹馍和红豆粥以及卤蛋的时间，就开始下雨了。</p>
<p>我有点焦急，又有想等待……</p>
<p>我本来打算去散步的，现在看来需要的是回我的租房处了。</p>
<h1 id="等待的思绪"><a href="#等待的思绪" class="headerlink" title="等待的思绪"></a>等待的思绪</h1><h2 id="焦急"><a href="#焦急" class="headerlink" title="焦急"></a>焦急</h2><p>起初，我亦是焦虑，心里盼着回去的念头。</p>
<p>尔后，想起自己曾经在雨中所思，不由一停，抛下那个焦虑的念头。</p>
<p>静静地在肉夹馍店门口等待着雨。</p>
<p>然而雨从小于到雨突然大雨，雨在宣告和邀请我去倾听它的世界。</p>
<p>往来的行人则是举着伞匆匆忙忙地经过我眼前地小道，在这条过客路上，大概有三位肤白貌美的美女踩着若隐若现的鞋子，大咧咧地展示着她的肤质和肤色，我不好意思地多瞄了几眼，脸红 ing。</p>
<h2 id="受邀"><a href="#受邀" class="headerlink" title="受邀"></a>受邀</h2><p>雨的世界，哗啦哗啦地雨点像玉珠落盘一样，雨点溅起一个个环形水圈。</p>
<p>我的豪情壮志去了哪里，多愁善感，无病呻吟的青年啊，那就是我。</p>
<p>我来了，雨，我的一位朋友。</p>
<h2 id="雨落地的样子"><a href="#雨落地的样子" class="headerlink" title="雨落地的样子"></a>雨落地的样子</h2><p>雨不断落入在地面薄薄的一层水面，让我想起了自己根据别人写的简易雨的特效，那时候的我用简单的线条描述着雨的感觉，落入地面微微溅起的水花，然而我还是那份稚嫩的感觉，知识的差距只能让我简单地模仿这个水花……</p>
<p>雨的视觉，雨的声效，都是我们通过解构主义获取的感官元素，它让我们拼出了简单的感官集合，然而这不格式塔，没有“俺寻思”之力。</p>
<p>这就是计算机Keep simple 原则，我们对与不必要的元素进行删减，这也是虚拟和现实世界的差别之一。</p>
<p>物理引擎中的雨特效是建立在真实物理还是只是简单的绘制上去……</p>
<p>我的思绪也跳到另一个地方，街上一辆车停留在马路中央，车主则是去了一个地方取东西。</p>
<h2 id="无效的鸣笛声"><a href="#无效的鸣笛声" class="headerlink" title="无效的鸣笛声"></a>无效的鸣笛声</h2><p>随着等待车辆渐渐增多，等待最前头鸣笛之后，就是后面车辆此起彼伏，共同的鸣笛。</p>
<p>他们都在释放着自己的不满，鸣笛声其实已经让生效，然而他们依旧愿意用这种方式打破周遭的宁静。</p>
<p>对于停在马路中央的车主，他显然是罪魁祸首。然而他并没有受到太多的惩罚，反而是周遭的事物要承受这样的苦果。</p>
<p>鸣笛许久，车主才慢悠悠地出来，拿着取到东西上了车，没有一丝对不起，没有一丝愧疚。一部分车辆已经扭到在逆道上行驶。</p>
<p>我想起分形与完形的概念，如我们所见。我们要的美好，它的分形也必然只有美好，可惜做不到惭愧反思纪律进化，剩下的也只有逆向淘汰。</p>
<p>有时我在羡慕偶然间看到《明日方舟》里的一个物种~海斯，它们可以团结一致，互相理解，一起进化。</p>
<p>又如群星里格式塔心智。</p>
<p>共业来临，谁会是真正的幸运儿呢？</p>
<h2 id="雨的挽留"><a href="#雨的挽留" class="headerlink" title="雨的挽留"></a>雨的挽留</h2><p>正当我以为雨停了，在回去准备拿出健康码的时候，雨又热情的挽留我。我退回肉夹馍店，欣赏着雨和往来的美女。</p>
<p>雨，我的朋友。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>敏感给了我自己的世界，</p>
<p>我能体验这个世界更多的感觉，</p>
<p>我有时会因为敏感而低落，</p>
<p>然而我还是渴望有它的存在，</p>
<p>它让我如此真实，</p>
<p>如此迷人。</p>
]]></content>
      <categories>
        <category>体验</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>梦中等雨</title>
    <url>/2022/%E6%A2%A6%E4%B8%AD%E7%AD%89%E9%9B%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　今早我从睡醒开始到10：30，一直在浅学hexo的博客搭建，学习了简单的代码块语法，以及高亮尝试，中间浅浅地接触了yaml格式配置，highlight.js高亮。</p>
<p>　　然而我的早餐时间，并未开始。于是乎，到10：30时，我准备去附近的肉夹馍店……在前往的途中，遇上了这场雨，它似乎想要告诉我什么。</p>
<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><ul>
<li>初始<br>　　简单的穿了鞋子，没有带上任何东西的我，出了门。</li>
</ul>
<p>　　开始的时候，雨犹如细丝，一丝丝地落在我的周围，我也享受这种视觉感受。</p>
<p>　　逐渐，雨开始大了点，雨由丝化滴，稀疏地滴落在我的衣服上。我也渐渐地靠向附近地屋檐边躲雨边前行。</p>
<ul>
<li>发生<br>　　在到达一个楼道通口的时候，细雨连成线，我就停下了前往吃饭的意识，收紧步伐，等待雨停之时……<br>　　等雨的时间里，雨落声音又带着我进入那种体验者的感觉，没有目的，没有束缚。它是想告诉我什么，停止步伐，还是继续前进。<br>　　雨的一切好像占据了我的格式塔心智，雨在告诉我它的众生相，我仿佛见到了众生在它里五味杂陈。谁能言的明“雨”的相，吾的“雨”与汝的“雨”如何相同呢？雨的到来，风的羁绊。风雨里的心仿佛都在彷徨着远方的灯塔，迫切地焦急地追逐。我如我所见，我的心在此刻亦如焦灼般的追逐。亦如我现在对找工作的态度一样。对于雨，我知道我的这份等待，雨终将会停止并等待下一次的到来，我可以等待；而我的人生，自己的工作，或许亦如所有，同样也只有等待，去明白自己的追寻，去沉淀自己的感觉，才能在等待中明白自己的所有。雨仿佛知道我的等待，越下越大，我再一次沉浸其中，然而风的存在却在呼唤着我，它的存在。我想是的，如我们所“见”，我们只在乎我们知道的。<br>　　雨，它的所有，填充着每个人的心灵，成为背景，成为旋律，成为遇见，成为我们每个的相。<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1>　　雨在述说着它的一切，而我是这场雨的一个观众。</li>
</ul>
]]></content>
      <categories>
        <category>体验</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题学习</title>
    <url>/2022/Hexo%E4%B8%BB%E9%A2%98%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="hexo主题"><a href="#hexo主题" class="headerlink" title="hexo主题"></a><code>hexo</code>主题</h1><p>我使用的是一名在官网留言的的网友的主题文件。</p>
<p>安装有两种方法当时。</p>
<p>一种是 <code>npm</code> 命令，</p>
<p>第二种是拷贝到项目根目录下 <code>themes</code>文件夹下，</p>
<p>然后在根目录配置 <code>_config.yml</code>里的</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-</span> <span class="comment">#主题名</span></span><br></pre></td></tr></table></figure>

<p>他提供了一个极简主题，方便快速搭建博客。</p>
<p>这是目录结构有一部是我自己的修改，和增加的功能。</p>
<h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:.</span><br><span class="line">│  .gitattributes</span><br><span class="line">│  .gitignore</span><br><span class="line">│  .npmignore</span><br><span class="line">│  .stylintrc</span><br><span class="line">│  .travis.yml</span><br><span class="line">│  index.js</span><br><span class="line">│  LICENSE</span><br><span class="line">│  logo.png</span><br><span class="line">│  move_config.js</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  rollup.config.js</span><br><span class="line">│  _config.yml</span><br><span class="line">│</span><br><span class="line">├─.github</span><br><span class="line">│  │  config.yml</span><br><span class="line">│  │  FUNDING.yml</span><br><span class="line">│  │</span><br><span class="line">│  ├─ISSUE_TEMPLATE</span><br><span class="line">│  │      bug-report.md</span><br><span class="line">│  │      feature-request.md</span><br><span class="line">│  │      other.md</span><br><span class="line">│  │      question.md</span><br><span class="line">│  │</span><br><span class="line">│  └─workflows</span><br><span class="line">│          npmpublish.yml</span><br><span class="line">│</span><br><span class="line">├─languages</span><br><span class="line">│      de.yml</span><br><span class="line">│      default.yml</span><br><span class="line">│      en.yml</span><br><span class="line">│      es.yml</span><br><span class="line">│      fr.yml</span><br><span class="line">│      ja.yml</span><br><span class="line">│      ko.yml</span><br><span class="line">│      nl.yml</span><br><span class="line">│      no.yml</span><br><span class="line">│      pt.yml</span><br><span class="line">│      ru.yml</span><br><span class="line">│      vi.yml</span><br><span class="line">│      zh-CN.yml</span><br><span class="line">│      zh-TW.yml</span><br><span class="line">│</span><br><span class="line">├─layout</span><br><span class="line">│  │  archive.ejs</span><br><span class="line">│  │  categories.ejs</span><br><span class="line">│  │  friends.ejs</span><br><span class="line">│  │  index.ejs</span><br><span class="line">│  │  layout.ejs</span><br><span class="line">│  │  page.ejs</span><br><span class="line">│  │  plain-page.ejs</span><br><span class="line">│  │  post.ejs</span><br><span class="line">│  │  tags.ejs</span><br><span class="line">│  │</span><br><span class="line">│  ├─partial</span><br><span class="line">│  │      addShowdowOnPC.ejs</span><br><span class="line">│  │      articleEnd.ejs</span><br><span class="line">│  │      my.ejs</span><br><span class="line">│  │      pageEncryption.ejs</span><br><span class="line">│  │</span><br><span class="line">│  └─_partial</span><br><span class="line">│      │  ads.ejs</span><br><span class="line">│      │  after-footer.ejs</span><br><span class="line">│      │  archive-post.ejs</span><br><span class="line">│      │  archive.ejs</span><br><span class="line">│      │  article.ejs</span><br><span class="line">│      │  ayer.ejs</span><br><span class="line">│      │  baidu-analytics.ejs</span><br><span class="line">│      │  broadcast.ejs</span><br><span class="line">│      │  float-btns.ejs</span><br><span class="line">│      │  footer.ejs</span><br><span class="line">│      │  google-analytics.ejs</span><br><span class="line">│      │  head.ejs</span><br><span class="line">│      │  katex.ejs</span><br><span class="line">│      │  lock.ejs</span><br><span class="line">│      │  mathjax.ejs</span><br><span class="line">│      │  modal.ejs</span><br><span class="line">│      │  music.ejs</span><br><span class="line">│      │  sidebar.ejs</span><br><span class="line">│      │  viewer.ejs</span><br><span class="line">│      │</span><br><span class="line">│      └─post</span><br><span class="line">│              albums.ejs</span><br><span class="line">│              author.ejs</span><br><span class="line">│              busuanzi.ejs</span><br><span class="line">│              category.ejs</span><br><span class="line">│              clipboard.ejs</span><br><span class="line">│              date.ejs</span><br><span class="line">│              gallery.ejs</span><br><span class="line">│              gitalk.ejs</span><br><span class="line">│              justifiedGallery.ejs</span><br><span class="line">│              minivaline.ejs</span><br><span class="line">│              nav.ejs</span><br><span class="line">│              search.ejs</span><br><span class="line">│              share.ejs</span><br><span class="line">│              tag.ejs</span><br><span class="line">│              title.ejs</span><br><span class="line">│              tocbot.ejs</span><br><span class="line">│              topping.ejs</span><br><span class="line">│              twikoo.ejs</span><br><span class="line">│              updated.ejs</span><br><span class="line">│              valine.ejs</span><br><span class="line">│              word.ejs</span><br><span class="line">│</span><br><span class="line">├─screenshots</span><br><span class="line">│      hexo-theme-ayer.png</span><br><span class="line">│</span><br><span class="line">├─scripts</span><br><span class="line">│  │  default_config.js</span><br><span class="line">│  │</span><br><span class="line">│  ├─events</span><br><span class="line">│  │  │  index.js</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─lib</span><br><span class="line">│  │          hello.js</span><br><span class="line">│  │          merge-configs.js</span><br><span class="line">│  │</span><br><span class="line">│  ├─filters</span><br><span class="line">│  │      index.js</span><br><span class="line">│  │      meta_generator.js</span><br><span class="line">│  │</span><br><span class="line">│  ├─helpers</span><br><span class="line">│  │      ayer-plus-vendors.js</span><br><span class="line">│  │      wordcount.js</span><br><span class="line">│  │</span><br><span class="line">│  ├─lib</span><br><span class="line">│  │      core.js</span><br><span class="line">│  │</span><br><span class="line">│  └─utils</span><br><span class="line">│          join-path.js</span><br><span class="line">│          object.js</span><br><span class="line">│</span><br><span class="line">├─<span class="built_in">source</span></span><br><span class="line">│  │  404.html</span><br><span class="line">│  │  favicon.ico</span><br><span class="line">│  │</span><br><span class="line">│  ├─css</span><br><span class="line">│  │  │  clipboard.styl</span><br><span class="line">│  │  │  custom.styl</span><br><span class="line">│  │  │  my.styl</span><br><span class="line">│  │  │  mySmallScreen.styl</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─fonts</span><br><span class="line">│  │          remixicon.css</span><br><span class="line">│  │          remixicon.eot</span><br><span class="line">│  │          remixicon.svg</span><br><span class="line">│  │          remixicon.ttf</span><br><span class="line">│  │          remixicon.woff</span><br><span class="line">│  │          remixicon.woff2</span><br><span class="line">│  │</span><br><span class="line">│  ├─dist</span><br><span class="line">│  │      main.css</span><br><span class="line">│  │      main.js</span><br><span class="line">│  │</span><br><span class="line">│  ├─images</span><br><span class="line">│  │      404.jpg</span><br><span class="line">│  │      alipay.jpg</span><br><span class="line">│  │      ayer-side.svg</span><br><span class="line">│  │      ayer.png</span><br><span class="line">│  │      ayer.svg</span><br><span class="line">│  │      beian.png</span><br><span class="line">│  │      cover1.jpg</span><br><span class="line">│  │      cover7.jpg</span><br><span class="line">│  │      forkme.png</span><br><span class="line">│  │      gitee.png</span><br><span class="line">│  │      github.png</span><br><span class="line">│  │      hexo-tag-chart.png</span><br><span class="line">│  │      hexo.png</span><br><span class="line">│  │      mouse.cur</span><br><span class="line">│  │      sponsor.jpg</span><br><span class="line">│  │      wechat.jpg</span><br><span class="line">│  │</span><br><span class="line">│  └─js</span><br><span class="line">│          busuanzi-2.3.pure.min.js</span><br><span class="line">│          clickBoom1.js</span><br><span class="line">│          clickBoom2.js</span><br><span class="line">│          clickLove.js</span><br><span class="line">│          dz.js</span><br><span class="line">│          jquery-3.6.0.min.js</span><br><span class="line">│          lazyload.min.js</span><br><span class="line">│          search.js</span><br><span class="line">│          tocbot.min.js</span><br><span class="line">│</span><br><span class="line">└─source-src</span><br><span class="line">    │  main.js</span><br><span class="line">    │</span><br><span class="line">    ├─css</span><br><span class="line">    │  │  style.styl</span><br><span class="line">    │  │  _darkmode.styl</span><br><span class="line">    │  │  _extend.styl</span><br><span class="line">    │  │  _mixins.styl</span><br><span class="line">    │  │  _normalize.styl</span><br><span class="line">    │  │  _remixicon.styl</span><br><span class="line">    │  │  _variables.styl</span><br><span class="line">    │  │</span><br><span class="line">    │  └─_partial</span><br><span class="line">    │          ads.styl</span><br><span class="line">    │          albums.styl</span><br><span class="line">    │          apple.styl</span><br><span class="line">    │          archive.styl</span><br><span class="line">    │          article.styl</span><br><span class="line">    │          articles.styl</span><br><span class="line">    │          ayer.styl</span><br><span class="line">    │          categories.styl</span><br><span class="line">    │          float.styl</span><br><span class="line">    │          footer.styl</span><br><span class="line">    │          friends.styl</span><br><span class="line">    │          gallery.styl</span><br><span class="line">    │          gitalk.styl</span><br><span class="line">    │          highlight.styl</span><br><span class="line">    │          justifiedGallery.styl</span><br><span class="line">    │          layout.styl</span><br><span class="line">    │          lists.styl</span><br><span class="line">    │          mobile.styl</span><br><span class="line">    │          navbar.styl</span><br><span class="line">    │          pace.styl</span><br><span class="line">    │          reward.styl</span><br><span class="line">    │          search.styl</span><br><span class="line">    │          share.styl</span><br><span class="line">    │          sidebar.styl</span><br><span class="line">    │          tag.styl</span><br><span class="line">    │          tocbot.styl</span><br><span class="line">    │          totop.styl</span><br><span class="line">    │</span><br><span class="line">    ├─js</span><br><span class="line">    │      ayer.js</span><br><span class="line">    │      share.js</span><br><span class="line">    │</span><br><span class="line">    └─util</span><br></pre></td></tr></table></figure>

<h3 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h3><p>如何快速打印文件目录结构呢？window</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree -f</span><br></pre></td></tr></table></figure>

<h2 id="github"><a href="#github" class="headerlink" title=".github"></a>.github</h2><p>这个主要是 Git 的工作目录，这里简单介绍一下里面的一些文件和文件夹作用。</p>
<p><code>.gitgnore</code>忽略Git监听的配置文件</p>
<p><code>README.md</code> 项目的介绍文件，是文档总目录。</p>
<p><code>package.json</code>项目的一些配置信息</p>
<p><code>.gitattributes</code>比较有意思，会详细点介绍</p>
<p><a href="https://blog.csdn.net/taiyangdao/article/details/78484623">这是一篇中文的介绍</a></p>
<p><a href="https://git-scm.com/docs/gitattributes">这是官方原文</a></p>
<p><a href="https://blog.csdn.net/u014298440/article/details/92659085?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-92659085-blog-111696005.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-92659085-blog-111696005.pc_relevant_aa&utm_relevant_index=1">git 行尾</a></p>
<p><a href="https://blog.csdn.net/qq_35425070/article/details/106883833?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-106883833-blog-78484623.pc_relevant_downloadblacklistv1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-106883833-blog-78484623.pc_relevant_downloadblacklistv1&utm_relevant_index=1">git 行尾1</a></p>
<ul>
<li><p>他是设置其文件夹路径下的所有文件 	</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配的文件 属性1 属性2  ...</span><br><span class="line">↓这个是主题的里的一个属性，它的作用是强制设置语言类型</span><br><span class="line">*.html linguist-language=javascript</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性的四种写法</p>
<ul>
<li>设置 属性 key</li>
<li>不设置属性   -key</li>
<li>设置键值对 key&#x3D;value</li>
<li>不声明属性，用来覆盖其它文件声明，!key</li>
<li>text &#x3D; auto 行尾自动转换<ul>
<li>行尾规范，有机会学习学习一下。行尾规范主要是换行方式，window 和 mac 开发换行方式不同。</li>
</ul>
</li>
<li>diff 属性</li>
</ul>
</li>
</ul>
<p><code>ISSUE_TEMPLATE</code>主要是给 PR用的模板形式</p>
<ul>
<li>参考这里 <a href="https://docs.github.com/cn/communities/using-templates-to-encourage-useful-issues-and-pull-requests/manually-creating-a-single-issue-template-for-your-repository">GitHub Docs</a></li>
</ul>
<p><code>workflows</code>同样可以参考上面，在搜索栏里可以找到，这个主要是可配置化的自动化工作流程，</p>
<p>主要是用的也是 <code>yml</code>语法</p>
<h4 id="阅读扩展"><a href="#阅读扩展" class="headerlink" title="阅读扩展"></a>阅读扩展</h4><p>[^yml vs json]: <a href="https://linuxhint.com/yaml-vs-json-which-is-better/">whitch is better</a></p>
<p><code>config.yml </code>文件 工作流的一部分文件</p>
<p><code>FUNDING.yml</code>赞赏作者</p>
<h2 id="languages"><a href="#languages" class="headerlink" title="languages"></a>languages</h2><p>语言配置</p>
<h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><p>主题主要采用 <code>ejs</code>编写</p>
<p><code>js</code> 代码中可以ejs渲染布尔，数字，字符串，之前以为不行，现在看来是ide报错限制我。</p>
<p>代码提示，本身无错误，难受报错，等我手撸一个 <code>vscode</code>插件，诸君待我披甲归来。</p>
<p><a href="https://blog.csdn.net/luoluoyang23/article/details/124543453">vscode 插件开发介绍博客</a></p>
<p><a href="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/preknowledge/variable-and-type">中文插件开发文档</a></p>
<p><a href="https://vscode-docs.readthedocs.io/en/stable/tools/yocode/">code support</a></p>
<p>解决了，奋战几天，突然脑子灵光一闪，随手一查就就有个暂时性解决方法。呜呜呜，这插件的文档又长又没人带。</p>
<p><a href="https://stackoverflow.com/questions/66827697/writing-ejs-in-a-script-is-giving-me-the-error-expression-expected">解决ejs在script的预期表达式问题</a></p>
<h2 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h2><p><code>hexo</code> 扩展</p>
<h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>加载对应的文件夹 <code>css</code> 和 <code>js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- js(&#x27;/js/xxx&#x27;) %&gt;</span><br><span class="line">&lt;%- css(&#x27;/css/xxx&#x27;) %&gt;</span><br></pre></td></tr></table></figure>

<p><code>dist</code>打包文件夹</p>
<h2 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h2><p>作者采用 <code>roullup</code>构建工具,对 <code>source-src</code>的目标文件映射到 <code>source</code>文件夹内</p>
<h2 id="滚动条bug"><a href="#滚动条bug" class="headerlink" title="滚动条bug"></a>滚动条bug</h2><p>假如滚动条事件不生效有可能是因为他的滚动条是其它节点而不是window或者什么。</p>
]]></content>
      <categories>
        <category>web.hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>短信验证的思考</title>
    <url>/2022/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>今天是希望慢慢的一天，随着学习深入，一些之前忘记的知识也被重新提取出来。</p>
<p>过去的我学习过于碎片化，而如今相比过去好一点，但仍然需要继续学习。</p>
<p>如今摆在我面前的是：</p>
<ul>
<li><input disabled="" type="checkbox"> <code>hexo</code>深入扩展架构</li>
<li><input disabled="" type="checkbox"> <code>nodejs</code>模块多线程工作，多进程，系统这些更加复炸的模块</li>
<li><input disabled="" type="checkbox"> 回到我熟悉的虚拟 <code>dom</code>开发</li>
<li><input disabled="" type="checkbox"> 对于数据存储采用本地端，还是服务端，还是云端，这些都需要成本。</li>
<li><input disabled="" type="checkbox"> ……</li>
</ul>
<p>确实有点觉得压力，或许我需要一些放松。</p>
<p>我打算先学 <code>Hexo</code>吧，一个 <code>Free</code> 和 <code>Happly</code> 是我目前的选择。</p>
<p>我觉得我现在对于学习还是蛮渴望的，除了背诵一堆无意义的东西┭┮﹏┭┮。</p>
<p>说说正事，这也是我产生记录的缘由。</p>
<h1 id="缘来"><a href="#缘来" class="headerlink" title="缘来"></a>缘来</h1><p>今天有一个自称移动客服打过来，告诉我打开5G开关，然后她会发个验证码，让我在电话里头告诉她，就可以每个月 10 G 流量。这对于我来说很心动。我已经很久没有富裕流量，不是因为我用手机流量特别多，而是我卡里每个月流量200 m ，┭┮﹏┭┮。</p>
<p>除了支付其余时间，都是打电话，有热点的蹭热点。</p>
<p>在我看来是不错的选择，然而我的行业经验告诉我事情不简单。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>验证码，本身第一属性作为人机交互验证的。这样就可以拦截和识别大部分自动程序。</p>
<p>其次，比如深度学习用于帮助机器学习的谷歌验证服务</p>
<p>第三种，就是登陆验证，这也就是为什么我当心的缘故</p>
<p>在挂断电话后，我反复查看短信，确实是移动发来的业务。</p>
<p>我去搜索确实有一些业务有这么做，但不是官方行为。也有一些人因此得到流量。但假如重来一次，我还是会放弃，</p>
<p>因为这种行为和诈骗分子索取验证码无差别。</p>
<p>从营销活动角度，这也是需要做出改变的。</p>
<p>我突然有点搞搞设计营销活动，算了。过去就是没有重心的探索导致，碎片化知识。</p>
<p>很多人都说好奇心很重要，但在我觉得如何保护好好奇心更重要。社会里杂事，琐事，环境都会影响一个人的选择，让他失去好奇心。</p>
<p>在社会上，我不得不面对生计奔波，我不是个贪钱的人，但我确实也需要糊口。</p>
<h2 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h2><p>当然也有破解的思路，主要最传统，人肉验证后，让机器人。这个方法属于最笨的，但破解成本是最低的，也是影响范围最小。</p>
<p>其次还有针对特定网站破解其脚本，这个需要一定的逆向工程能力，之前学过一点皮毛。这种方法也属于笨方法，需要的水准高一点。</p>
<p>第三种，针对常规验证类型，启用一个伪AI验证，就是不断手动扩充其验证方式。它提供一个类似行为接口，然后开发者编写特定的脚本进行破解。这种方法也属于比较笨，因为能做到的也已经属于优秀程序员级别，浪费和消耗的精力也比较大。</p>
<p>第四种，就是目前的深度学习，这种就不讨论。因为这种成本最大，难度也大，我( •̀ ω •́ )y不知到，我现在只是简单涉及前后端的程序员。</p>
<p>还有第五种，那就是社会工程学，永远也不要怀疑。这种成本最廉价，也最有风险。操作上分为主动接触，或者被动接触等一下列入侵手段，“走后门”就是他们的写照。</p>
<p>还有第六种，那就是我们最强大的领域，灵能飞升。相信你自己靠着心灵感应就能扭曲现实，俺寻思没有验证码，密码就是这个。</p>
<p>以及第七种，传闻中的“物理黑客”，他们已经领域的机械之心，任何程序的代码对于他们不过是0和1的区别，最擅长的就是物理黑入。</p>
<p>我b（￣▽￣）d　好皮。</p>
<h2 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h2><p>验证的方式也分为几种，本地验证，服务端验证，第三方验证，形式多种多样。</p>
<p>本地设备上也有多种验证方式，</p>
<p>其实按上面的话来说，其实分为无网络验证和网络验证这两种更好。</p>
<p>当然还有好多角度。</p>
<p>验证的设备或者形式也可以分类。</p>
<p>如短信验证，邮箱验证，图片验证，计算验证，动态验证，担保人验证……</p>
<p>说的有点多，我先学习了。</p>
]]></content>
      <categories>
        <category>体验</category>
      </categories>
      <tags>
        <tag>人生</tag>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCODE插件编写记录</title>
    <url>/2022/VSCODE%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="感谢-THANKS"><a href="#感谢-THANKS" class="headerlink" title="感谢 THANKS"></a>感谢 THANKS</h1><p><a href="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/get-started/extension-anatomy">中文VSCode</a></p>
<p><a href="https://code.visualstudio.com/">官网</a></p>
<h1 id="记录-RECORD"><a href="#记录-RECORD" class="headerlink" title="记录 RECORD"></a>记录 RECORD</h1><ol>
<li><p>小错误官方教程自己谁便定义几个不一样的名字就进不去，但以后还是先跟着官方吧。好累，我已经连续不断学习了很久，记得小时候，我常常在熬夜写作业，那种又困又想睡觉的感觉是那么强烈。它在呼唤我停止。我从小不喜欢填鸭式学习，逐渐变得自己离所有人越来越远。</p>
</li>
<li><p>多多阅读英文注释，能够快速获悉一些关键意图。</p>
</li>
<li><p><code>vscode</code>鼠标悬浮会有一些关于一些<code>package.json</code>字段提示。<a href="https://en.wikipedia.org/wiki/Dispose_pattern">Dispose pattern</a> 释放器模式</p>
</li>
<li><p>命令写法</p>
<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    # 激活事件</span><br><span class="line">    <span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="string">&quot;onCommand:fireMan.fireMan&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;onCommand:replace.replace&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;onCommand:replace.fire&quot;</span></span><br><span class="line">	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	# 所有贡献</span><br><span class="line">	<span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        # 命令面板提供命令</span><br><span class="line">		<span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fireMan.fireMan&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fireMan&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;replace.replace&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;replace&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;replace.fire&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fire&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>extendsion.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vscode <span class="keyword">from</span> <span class="string">&#x27;vscode&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">active</span>(<span class="params">context:vscode.ExtensionContext</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> disposable=vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(<span class="string">&#x27;fireMan&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       vscode.<span class="property">window</span>.<span class="title function_">showErrorMessage</span>(<span class="string">&#x27;Hello,a error with code.this is fireMan.&#x27;</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">    context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(disposable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deactivate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>插件目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .vscode</span><br><span class="line">│   ├── launch.json     // 插件加载和调试的配置</span><br><span class="line">│   └── tasks.json      // 配置TypeScript编译任务</span><br><span class="line">├── .gitignore          // 忽略构建输出和node_modules文件</span><br><span class="line">├── README.md           // 一个友好的插件文档</span><br><span class="line">├── src</span><br><span class="line">│   └── extension.ts    // 插件源代码</span><br><span class="line">├── package.json        // 插件配置清单</span><br><span class="line">├── tsconfig.json       // TypeScript配置</span><br></pre></td></tr></table></figure>

<p>一些相对需要记忆的东西</p>
<ul>
<li><p><code>main</code> 插件的主入口</p>
</li>
<li><p><code>postinstall</code>脚本：根据 <code>engies.vscode</code> 的版本信息进行安装。一旦 <code>vscode.d.ts</code>文件存在于 <code>node_modules/vscode/vscode.d.ts</code> ， IntelliSense就会开始运作，你就可以所有 <code>VS CODE API</code> 进行定义跳转或者语法检测。<a href="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/get-started/extension-anatomy">小不足有空PR</a></p>
</li>
<li><p>插件入口导出两个函数 <code>activate</code> 和 <code>deactivate</code>。注册  <strong>激活事件</strong>之前触发 <code>activate</code>,<code>deactivate</code>则提供销毁权柄。</p>
</li>
<li><p><code>vscode</code>模块包含 <code>node</code>, <code>./node_modules/vscode/bin/install</code>的脚本。这个脚本拉取 <code>package.json</code>中的 <code>engines.vscode</code>字段定义的 VS Code API 。这个脚本执行过，你就得到智能代码，定义跳转等 <code>TS</code>特性。</p>
</li>
<li><p><code>Mocha</code>测试库</p>
</li>
<li><p><code>glob</code> Match files using the patterns the shell uses, like stars and stuff.使用参数匹配文件，内置使用 <code>minimatch</code>模块</p>
</li>
</ul>
</li>
</ol>
<h2 id="暂时鸽了"><a href="#暂时鸽了" class="headerlink" title="暂时鸽了"></a>暂时鸽了</h2><p>喜极而泣，找到一个可以解决的方法，暂时不用编写什么支持插件了，&#96;(<em>&gt;﹏&lt;</em>)′。</p>
<p>解决之路在原文列出。</p>
]]></content>
      <categories>
        <category>web</category>
        <category>ide</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-06-11情绪语录</title>
    <url>/2022/2022-06-11%E6%83%85%E7%BB%AA%E8%AF%AD%E5%BD%95/</url>
    <content><![CDATA[<h1 id="心里话"><a href="#心里话" class="headerlink" title="心里话"></a>心里话</h1><p>很抱歉，我又意志消沉。我每天花费十几个小时，都在学习，但是我身心有点奔溃了。从昨晚快一点，消沉到现在晚上六点，直到现在我抱着悲伤起来。除了一点时间，去外面散散步，在卧室里刷一下美图，我都在努力了。</p>
<p>我明白进入社会就是。没有缘分，想要保持自我的人不是被同化就是被边缘化，但我不甘心。</p>
<p>我很多时候告诉自己爱自己一遍，不要担心，但还是继续自我抑郁。</p>
<p>也许我会回自己老家，做一个瘦弱的农民吧。</p>
<p>我曾经告诉自己做自己的伯乐，我这一周就开始搭建自己的博客，开始写作。不管如何，我需要休息了，但我还是骨子里无视精力的投入，被榨干。</p>
<p>很多人都说老实人软弱。老实人不软弱，只是不愿意做绝，老实人不愿意伤害世界。</p>
<p>我不知道我会选择什么职业，这个社会在践踏我从学校学到真善美，我不愿意骗人，不愿意伤害别人，我在生活中没有辱骂，我没有太多选择，身体，良知都在让我选择自己的道路，我发现我没有我所爱，尽管父母一直在告诉我开心就好，但我还是容易悲痛。</p>
<p>我现在眼睛感觉快看不清了。</p>
<p>别了，别发泄我的感觉了。</p>
<p>好累啊。这个感觉，倦意充斥着我，潮湿闷热，蚊虫，内心绝望的感觉。</p>
<p>我会活下去吗？</p>
<p>我感觉我快不行了。</p>
<p>自私的人可以活在自己的感受里，无私的人只能活在改变不了的痛苦里。</p>
<h1 id="挣扎"><a href="#挣扎" class="headerlink" title="挣扎"></a>挣扎</h1><p>我在床上躺了半小时，想睡觉睡不了，但我也差不多想通了，我健康的活着就是最好的礼物。如果有一天，我又抑郁了，我希望我能看见这篇文章。</p>
<p>接下来就打扫打扫卫生，吃吃饭，买个蚊帐，上次蚊帐一直没发过来，订单就收到了，还好商家愿意退钱，┭┮﹏┭┮。</p>
<p>上面丧气话，我也不会抹除，这就是真实的感受。</p>
<p>我尽可能对别人好，可还是有些人不领情，他们可能和我不是一路子吧。顺便吐一吐生活的过往。</p>
<p>我从租房a搬到租房b，终究还是回到起点。租房a的一位“仁兄”嫌我睡觉打呼噜每晚三番五次故意踢我床板，起床的那一刻，我心脏都快炸了，那一段时间心脏感觉承受不住一样。</p>
<p>在那一段时间我尽力买闭嘴贴，鼻贴阻止打呼噜，收效甚微，然而还是阻止不了其恶意。</p>
<p>况且这位“仁兄”也三更半夜不睡觉也打呼噜，我都没有嫌弃对方。</p>
<p>就这样我就搬到b地方，b地方的仁兄，也是我现在同住一处的租房，我记得刚来的时候我低声下气，他说看上去就是个老实人。<br>我很感激，记得他需要帮忙的时候，我心软帮了他搞项目问题，平日里也待他不错，他也有回应一两次。<br>直到那一天，一个早晨，我急匆匆的跑去充电，结果那个门没开，我四处打听，走了小门，冲完电，回来告诉他让他均电费。他没有表达什么，而那段时间是我找不到工作的一个焦虑时间吧。就这样，他嫌我开灯时间太久，白天不要开灯，也开口闭口不提电费的事，我主动提醒后就嗯了一声走了。就这样过了两天两次，他终于在三更半夜交了，还不情不愿，数落我。我没有收他的钱，我知道他已经不是一路人了，他收到自动退款也没有主动站出来。</p>
<p>那位仁兄，经常不开灯，看电子设备。虽然我有阵子不开心的时候也如此，但我感觉真的难以理解，他来租房处已经换了3次电脑，使用的是败家之眼，幻这些大牌子，键盘也上千的这个人，电费问题上居然就和我决裂，显然我可以感受到他的语气不满。</p>
<p>就这样，我主动承包电费，也不和他交往了。</p>
<p>为了一点钱财就和情谊决裂，我看不透。不要说什么节约用电，平日里他用水哗哗，电费可能就是相对贵了点。而我自己用水挤着那一点水，涂抹在手上。</p>
<p>现在用我电费倒是挺土豪的，白天无人时刻，风扇依旧呼呼地开着，又有钱买了个超大显示器。</p>
<p>我那时候有郁闷过，想在想通了。找工作急不来，如果编程行业不要我，那我就选择一份安心的工作。即可，有机会也要搬走。一个人独处，一个人世界，一个人安静。</p>
<p>至于社会不需要我，嘿嘿，我也不在乎。</p>
<p>我的责任心，荣誉感不是用来为那些不值得拥有的人。</p>
<p>其实这些烦恼都是因为我遇到那些不是我自身原因的人，我改变不了，不还有一种。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>希望每一个真正需要光的人都能找到属于自己的光，不被迷茫的烟雾所埋葬。</p>
<p>江湖不老，人心不变。那人那光，依旧依在。</p>
<p>泥团(￣︶￣*))。</p>
]]></content>
      <categories>
        <category>体验</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-06-12散步小记</title>
    <url>/2022/2022-06-12%E6%95%A3%E6%AD%A5%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="新发现"><a href="#新发现" class="headerlink" title="新发现"></a>新发现</h1><p>今天我穿过新的马路，发现了一座 <strong>公园</strong>，免费的，我进去里面逛了一圈。</p>
<p>公园不大，但是花草都是精心摆设，整体色调为三种，一粉红一紫色一绿色。绿色上色的种类倒是多，有青绿色，翠绿色。公园没有太多喧哗，整体感觉还不错。</p>
<p>里边还有一些健身器材，挺好玩的。我去踩了那个两脚踏。</p>
<p>记得在家里的最活泼的时候，我经常去小区里面的健身器材上玩。当时胆子和活力是现在不敢想象的，每天都充斥着快乐。虽然瘦的和猴子差不多，但精神和可爱就比现在强多了。</p>
<p>有时候，我也在怀念过去那段时光。我现在变得沉默寡言，我不后悔。我如果不这么做，我可能会成为一个自己内心讨厌的人。无知最容易快乐，有了负担，有了追求就会被现实被责任所压垮。</p>
<p>那如何做个绝对乐观之人呢？</p>
<p>这也是今天回来偶然所得，不管这感觉像个笑一样，恐为世俗不容。	</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><!--新感悟--></h2><!--“强者就是看透生活依旧热爱。”-->

<!--记得那句话，看透生活，依旧热爱。-->

<!--达成这个有两种。-->

<!--一种生活为乐，另一种与生活无关。-->

<!--生活为乐，那就是面对那些不愿意面对的为乐。这个可就复杂了，什么是不愿意面对的，那就是你的妄念。以生活不幸为乐，以一种超越常识的存在，看待这个一切，对一切的妄念破灭为乐。-->

<!--第二种，对一切无感，成为一个绝对的精神存在。-->

<!--绝对乐观者是众生难以想象的存在，这两种存在都是一种奇怪。因为他们的快乐已经不是世俗可以评价和认知的，他们看起来像他者，就是无法评价和认知的存在.-->
]]></content>
      <categories>
        <category>体验</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown in vscode syntax prompt exploration scheme</title>
    <url>/2022/Markdown%20in%20vscode%20syntax%20prompt%20exploration%20scheme/</url>
    <content><![CDATA[<h1 id="Why-I-want-to-write-it"><a href="#Why-I-want-to-write-it" class="headerlink" title="Why I want to write it?"></a>Why I want to write it?</h1><p>when I want to write the code what about HTML in markdown file,there is not any code hints.<br>So that’s why I wrote this post.</p>
<h1 id="Is-there-any-solution"><a href="#Is-there-any-solution" class="headerlink" title="Is there any solution?"></a>Is there any solution?</h1><p>Yes,but it doesn’t look prefect.</p>
<h1 id="how-to-solve-it"><a href="#how-to-solve-it" class="headerlink" title="how to solve it?"></a>how to solve it?</h1><ul>
<li>Frist way,you can use other html file to write code and then you can copy it and paste in markdown file.</li>
<li>Second way,you can use Select language mode to change markdown and html.</li>
<li>Third way, may be a vscode plugin can solve this question ,but now I can’t find it.</li>
</ul>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>I’ve been looking for a web development job for nearly three months. Maybe I shouldn’t keep looking like this. Although I like this job, I really need to find a job that can exercise rather than sitting in front of the computer all day.<br>I like programming because I can create and explore, but I don’t have enough excellence to become a cultivator in this industry.<br>People who are not good enough in this society do not need much talent for creation and exploration. I’m embarrassed. I seem to be marginalizing.<br>Thank you for reading. Maybe you will find a new direction.</p>
]]></content>
      <categories>
        <category>ide</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
