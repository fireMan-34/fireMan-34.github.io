<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  <subtitle>MaXuFeng</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-05T16:01:51.035Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo深入再学习</title>
    <link href="http://example.com/2022/hexo%E6%B7%B1%E5%85%A5%E5%86%8D%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/hexo%E6%B7%B1%E5%85%A5%E5%86%8D%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-05T10:02:57.000Z</published>
    <updated>2022-06-05T16:01:51.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主题文件夹功能探索"><a href="#主题文件夹功能探索" class="headerlink" title="主题文件夹功能探索"></a>主题文件夹功能探索</h1><h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><p><strong>ejs</strong>文件或者其他模板文件。</p><h1 id="HEXO设计模式笔记"><a href="#HEXO设计模式笔记" class="headerlink" title="HEXO设计模式笔记"></a>HEXO设计模式笔记</h1><p>静态网站生成器以及api文档。</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a href="https://juejin.cn/post/6844903469669679117">hexo设计模式探索</a></p><p><a href="https://www.jianshu.com/p/56b9cb8ac2ea">node之proce模块</a></p><p><a href="https://blog.csdn.net/fangxuan1509/article/details/107469465">minimist命令行引擎</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf原型组合</a></p><p><a href="https://baike.baidu.com/item/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E"> 模板引擎</a></p><p><a href="http://nodejs.cn/api/vm.html">nodejs vm模块</a></p><h2 id="框架特色"><a href="#框架特色" class="headerlink" title="框架特色"></a>框架特色</h2><p>​nodejs运行环境，速度块，扩展能力强，插件丰富，主题开发，一键部署。</p><h2 id="盲点"><a href="#盲点" class="headerlink" title="盲点"></a>盲点</h2><h3 id="process-argv"><a href="#process-argv" class="headerlink" title="process.argv"></a>process.argv</h3><p>process.argv返回一个包含所有启动Nodejs的参数，第一个参数为process.execPath,第二个为当前执行js文件的路径，其它为其它命令行参数。</p><h3 id="minimist"><a href="#minimist" class="headerlink" title="minimist"></a>minimist</h3><p>轻量级nodejs命令行解析引擎。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args=<span class="title function_">minimist</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> cmd=args.<span class="property">_</span>.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">var</span> hexo=<span class="keyword">new</span> <span class="title class_">Hexo</span>();</span><br><span class="line">hexo.<span class="title function_">init</span>();</span><br><span class="line">hexo.<span class="title function_">call</span>(cmd,args);</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>The store means  a db in program.</p><p>作者的意思大概是事件逻辑存储在store，依靠store进行耦合工作。</p><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><p>函数的意思，或者说可以通过它来执行某些逻辑。</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><h3 id="node-vm"><a href="#node-vm" class="headerlink" title="node vm"></a>node vm</h3><p>v8虚拟机，无安全机制，所以使用者自行担保安全机制。</p><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>在命令行模块，Hexo选择使用minimist来解析命令行参数得到一个js对象，并建立一个Hexo实例并初始化，最后通过实例对象call方法传递命令行指令。</p><h2 id="Hexo入口模块设计"><a href="#Hexo入口模块设计" class="headerlink" title="Hexo入口模块设计"></a>Hexo入口模块设计</h2><p>采用构造-原型组合定义类，采用组合继承的方式继承Node的EventEmitter模块，相对简单的完成on与emit的发布订阅。</p><p>实例化阶段，保存所编译文件的存放路径，输出路径，以及其它脚本，插件，主题等所处的路径，保存环境变量，即命令行参数，版本信息号等基本信息。</p><p>创建扩展对象按不同功能进行分类，作用是创建store，用于注册句柄，获取句柄。</p><p>扩展类型控制台(Console)、部署器(Deployer)、过滤器(Filter)、生成器(Generator)、辅助函数(Helper)、处理器(Processor)、渲染引擎(Renderer)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hexo</span>(<span class="params">base,args</span>)&#123;</span><br><span class="line">    <span class="title class_">EventEmitter</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">public_dir</span>=path.<span class="title function_">join</span>(base,<span class="string">&#x27;public&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">source_dir</span>=path.<span class="title function_">join</span>(base,<span class="string">&#x27;source&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">extend</span>=&#123;</span><br><span class="line">        <span class="attr">console</span>:<span class="keyword">new</span> extend.<span class="title class_">Console</span>();</span><br><span class="line">        <span class="attr">generator</span>:<span class="keyword">new</span> extend.<span class="title class_">Generator</span>();</span><br><span class="line">    <span class="attr">processor</span>:<span class="keyword">new</span> extend.<span class="title class_">Processor</span>();</span><br><span class="line">    <span class="attr">renderer</span>:<span class="keyword">new</span> extend.<span class="title class_">Renderer</span>();</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//等同于Object.setPrototypeOf(Hexo.prototype,EventEmitter.prototype);</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).<span class="title function_">inherits</span>(<span class="title class_">Hexo</span>,<span class="title class_">EventEmitter</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换句话说，扩展对象是个容器，一个事件注册机。</p><p>接下来要做的是Hexo初始化阶段，加载Hexo内置插件，不断增加扩容工作，以渲染引擎为例，向extend.renderer注册渲染过程处理函数，在其它模块中就可以很方便的从hexo的上下文去调用渲染。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Hexo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//加载内部插件</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/console&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/generator&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/processor&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/renderer&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//plugins/renderer注册渲染函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> renderer=hexo.<span class="property">extend</span>.<span class="property">renderer</span>;</span><br><span class="line">    renderer.<span class="title function_">register</span>(<span class="string">&#x27;swig&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./swig&#x27;</span>));</span><br><span class="line"> renderer.<span class="title function_">register</span>(<span class="string">&#x27;ejs&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./ejs&#x27;</span>));</span><br><span class="line"> renderer.<span class="title function_">register</span>(<span class="string">&#x27;yml&#x27;</span>,<span class="string">&#x27;josn&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./yaml&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用渲染器 </span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exprots</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">     <span class="keyword">var</span> renderer=hexo.<span class="property">extend</span>.<span class="property">renderer</span>;</span><br><span class="line">     <span class="keyword">return</span> renderer.<span class="title function_">get</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>hexo 还能加载外部插件,通过 npm 的方式存放在 node_module 或目录 script 里面，巧妙的是，插件内部无效引入 hexo 对象，可以直接hexo变量来访问上下文，正是由于框架采用 Node 中 vm 模块(Virtual Machine) 模块来加载 js 文件，相当于模板引擎实现原理中的new Function或者 eval 来解析并执行字符串代码。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载外部插件</span></span><br><span class="line"><span class="title class_">Hexo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">loadPlugin</span>=<span class="keyword">function</span>(<span class="params">path</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">script</span>)&#123;</span><br><span class="line">       script=<span class="string">`(function(hexo)&#123;`</span>+script+<span class="string">&#x27;&#125;)&#x27;</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">    retutn vm.<span class="title function_">runInThisContext</span>(script,path)(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hexo编译模块设计"><a href="#Hexo编译模块设计" class="headerlink" title="Hexo编译模块设计"></a>Hexo编译模块设计</h2><p>预期用户命令接口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo generate</span></span><br></pre></td></tr></table></figure><p>首先往 Hexo 扩展对象 Console 中注册 &#x3D;&#x3D;generate&#x3D;&#x3D; 函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">register</span>(<span class="string">&#x27;generate&#x27;</span>,<span class="string">&#x27;Generate static files&#x27;</span>,&#123;</span><br><span class="line">   <span class="attr">options</span>:[</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-d,--deloy&#x27;</span>,<span class="attr">desc</span>:<span class="string">&#x27;Deploy after generated&#x27;</span>&#125;,</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-f,--force&#x27;</span>,<span class="attr">desc</span>:<span class="string">&#x27;Force regenerate&#x27;</span>&#125;,</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-w,--watch&#x27;</span>,<span class="attr">dec</span>:<span class="string">&#x27;Watch file changes&#x27;</span>&#125;,</span><br><span class="line">   ]</span><br><span class="line">&#125;,<span class="built_in">require</span>(<span class="string">&#x27;/generate&#x27;</span>))</span><br></pre></td></tr></table></figure><p>generate 函数用于生成目标文件夹，从 Hexo 路由模块中取得所由需要生成目标文件的路径，调用fs输出文件，在此之前，首先对源文件进行预处理，把路径写入路由。由于Hexo本身设计的特点，源文件又分为内容和主题两部分，分别为放在 source 和theme文件夹中，所以得调用 process 函数分别对它们进行预处理。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    hexo.<span class="property">source</span>.<span class="title function_">process</span>();</span><br><span class="line">    hexo.<span class="property">theme</span>.<span class="title function_">process</span>();</span><br><span class="line">    routerList.<span class="title function_">forEach</span>(<span class="function"><span class="params">path</span>=&gt;</span><span class="title function_">writeFile</span>(path));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hexo 抽象出一层公用模块用来管理所有处理器，命名为Box，相当于一个容器，统一管理处理器的添加删除执行监控，并分别为source和theme创建实列，Box原型如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">base</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">base</span>=base;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>=[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addProcessor</span>=<span class="keyword">function</span>(<span class="params">pattern,fn</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        pattern,</span><br><span class="line">        <span class="attr">process</span>:fn,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">process</span>=<span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">processor</span>=&gt;</span>processor.<span class="title function_">process</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了Box容器，接下来要做的就是往容器注入处理器，同样用插件形式往扩展对象extend中注册句柄，在注入到 Box 容器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> &#123;processor&#125;=hexo.<span class="property">extend</span>;</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="built_in">require</span>(<span class="string">&#x27;./asset&#x27;</span>)(hexo);</span><br><span class="line">    processer.<span class="title function_">register</span>(obj.<span class="property">pattern</span>,obj.<span class="property">process</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以markdown文件的处理为例，成功匹配到文件扩展名，调用hexo-font-matter利用正则表达式匹配解析文件，分离顶部元素据与主题内容，类似于gray-matter，把元数据与内容key&#x2F;value的形式转换为一个js对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">patter</span>:<span class="regexp">/\.md/</span>,</span><br><span class="line">        <span class="attr">process</span>:<span class="keyword">function</span>(<span class="params">path</span>)&#123;</span><br><span class="line">            <span class="title function_">readFile</span>(path,<span class="keyword">function</span>(<span class="params">err,content</span>)&#123;</span><br><span class="line">               <span class="keyword">var</span> data=<span class="built_in">require</span>(<span class="string">&#x27;hexo-front-matter&#x27;</span>)(content);</span><br><span class="line">                data.<span class="property">source</span>=path;</span><br><span class="line">                data.<span class="property">raw</span>=content;</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//markdown文件</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">title:hello,</span></span><br><span class="line"><span class="string">layout:home</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#hexo</span></span><br><span class="line"><span class="string">A</span> <span class="string">fast,simple&amp;porwerful</span> <span class="string">blog</span> <span class="string">framework</span></span><br></pre></td></tr></table></figure><p>解析成&#x3D;&gt;</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">layout</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">_content</span>:<span class="string">&#x27;# Hexo\n fast,simple&amp;porwerful blog framework&#x27;</span>,</span><br><span class="line">    <span class="attr">source</span>:<span class="string">&#x27;README.md&#x27;</span>,</span><br><span class="line">    <span class="attr">raw</span>:<span class="string">`---\ntitile:hello\n---# Hexo\n fast,simple&amp;porwerful blog framework`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 下一步，Hexo定义过滤器的概念(Filter)的概念，借鉴于Wordpress，用于在模板渲染前后修改具体数据，也可以把它看成钩子，例如使用 marked 编译 markdown 文件内容。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo.<span class="title function_">execFilter</span>(<span class="params"><span class="string">&#x27;before_generate&#x27;</span>,<span class="keyword">function</span>(data)</span>)&#123;</span><br><span class="line">     hexo.<span class="property">render</span>.<span class="title function_">render</span>(&#123;</span><br><span class="line">        <span class="attr">text</span>:data.<span class="property">_content</span>,</span><br><span class="line">        <span class="attr">path</span>:data.<span class="property">source</span>,</span><br><span class="line">        <span class="attr">engine</span>:data.<span class="property">engine</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后增加一条 content 属性，带有标签与类名的markdown html 片段。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">layout</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">_content</span>:<span class="string">&#x27;# Hexo\n fast,simple&amp;porwerful blog framework&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>:<span class="string">&#x27;&lt;h1 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;Hexo&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;fast,simple&amp;porwerful blog framework&lt;/p&gt;&#x27;</span></span><br><span class="line">    <span class="attr">source</span>:<span class="string">&#x27;README.md&#x27;</span>,</span><br><span class="line">    <span class="attr">raw</span>:<span class="string">`---\ntitile:hello\n---# Hexo\n fast,simple&amp;porwerful blog framework`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到页面数据后，进入模板引擎渲染阶段，Hexo 本身并不带模板引擎，需要借助第三方库，如ejs，并通过一个适配器，把原接口转换为需求接口，向扩展对象extend.render中注册模板解析函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexok.<span class="property">extend</span>.<span class="property">renderer</span>.<span class="title function_">register</span>(<span class="string">&#x27;ejs&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="keyword">function</span>(<span class="params">data,locals</span>)&#123;</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>).<span class="title function_">render</span>(data,locals) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>模板引擎解析后的函数在hexo.theme对象中， 以文件名作为key，后续渲染只需要layout就能找到指定的渲染函数，注入locals变量(上面markdown解析后的js对象+扩展对象extend.helper定义变量，函数)，生成最终文本字符串。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> view=hexo.<span class="property">theme</span>.<span class="title function_">getView</span>(data.<span class="property">layout</span>);</span><br><span class="line">view.<span class="title function_">render</span>(lcoals);</span><br></pre></td></tr></table></figure><p>最后通过Node fs 模块将内容输出public目标。</p><p>回顾所有的工作流程，可以看作是</p><p>cli&#x3D;&gt;hexo.init&#x3D;&gt;plugin.load&#x3D;&gt;process&#x3D;&gt;filter&#x3D;&gt;render&#x3D;&gt;generate</p><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><p>此外，Hexo还有很多优秀的设计模式</p><h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><p>Hexo 引入 json 数据库 warehouse ,也是作者自己开发的一个数据库驱动，api 和 Mongoose 相差无几。在架构中角色充当一个中介者，存储临时数据，或者持久化数据数据存储，如博客的发表时间，还可以作为缓存层，比对文件修改时间，跳过无修改文件的编译过程，减少二次编译的时间。</p><h3 id="异步方案"><a href="#异步方案" class="headerlink" title="异步方案"></a>异步方案</h3><p>在大量异步回调文件会造成代码阅读性下降。</p><p>Hexo 引入 Promise 库  bindBrid,  内置丰富 API，</p><p>很方便的处理异步的流程控制，如使用 Promise.promisify(require(‘fs’).readFile)可以原生 fs 模块包装成一个promise对象。</p><h3 id="通用日志模块"><a href="#通用日志模块" class="headerlink" title="通用日志模块"></a>通用日志模块</h3><p>把Log划分为六个级别，’TRACE’,’DEBUG’,’INFO,’WARN’,’FATAL’,不同级别输出不同的格式与颜色(chalk) ,并提供命令含接口，如果带有–debug字段，则Log自动降级为’TRACE’。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主题文件夹功能探索&quot;&gt;&lt;a href=&quot;#主题文件夹功能探索&quot; class=&quot;headerlink&quot; title=&quot;主题文件夹功能探索&quot;&gt;&lt;/a&gt;主题文件夹功能探索&lt;/h1&gt;&lt;h2 id=&quot;layout&quot;&gt;&lt;a href=&quot;#layout&quot; class=&quot;head</summary>
      
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    <category term="hexo" scheme="http://example.com/categories/web/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客部署</title>
    <link href="http://example.com/2022/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</id>
    <published>2022-06-04T11:09:14.000Z</published>
    <updated>2022-06-05T01:10:11.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-CDN-加速你的-GitHub-Pages-网站"><a href="#使用-CDN-加速你的-GitHub-Pages-网站" class="headerlink" title="使用 CDN 加速你的 GitHub Pages 网站"></a>使用 CDN 加速你的 GitHub Pages 网站</h1><p><strong>感谢</strong></p><ul><li>云游君！： <a href="https://www.yunyoujun.cn/posts/use-cdn-speed-up-site/">使用 CDN 加速你的 GitHub Pages 网站</a></li><li><a href="https://blog.csdn.net/hl_java/article/details/83989727">DNS术语中的CNAME、A、MX、TTL名词解释</a></li><li><a href="https://blog.csdn.net/huiruwei1020/article/details/107728435">利用CDN加速GithubPage访问速度</a></li><li><a href="https://app.netlify.com/">免费网站部署</a></li></ul><hr><p><strong>记录</strong></p><ol><li><p>GitHub登陆验证过程</p><p>采用跳转到验证</p></li></ol><p><strong>词汇</strong></p><p>FreeLancer自由职业者</p><p>Hobby developer业余爱好者</p><p>Other其他者</p><p>overview概述</p><p>permission准许</p><p>Verify验证</p><p><strong>术语</strong></p><ul><li>DNS(域名)</li></ul><ol><li>A(Address)记录是用来指定主机名（或域名）对应的IP地址记录，绑定Web Server</li><li>MAX(Mail exchanger)邮件路由记录，绑定Mail Server。</li><li>CNAME(Canonical name)别名记录，多个域名指向同一个ip。</li><li>TTL(Time To Line)生存时间，指的是对未知域名记录的缓存存在时间，缓存策略。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-CDN-加速你的-GitHub-Pages-网站&quot;&gt;&lt;a href=&quot;#使用-CDN-加速你的-GitHub-Pages-网站&quot; class=&quot;headerlink&quot; title=&quot;使用 CDN 加速你的 GitHub Pages 网站&quot;&gt;&lt;/a&gt;使用 CD</summary>
      
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    <category term="hexo" scheme="http://example.com/categories/web/hexo/"/>
    
    <category term="部署" scheme="http://example.com/categories/web/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="部署" scheme="http://example.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>梦中等雨</title>
    <link href="http://example.com/2022/%E6%A2%A6%E4%B8%AD%E7%AD%89%E9%9B%A8/"/>
    <id>http://example.com/2022/%E6%A2%A6%E4%B8%AD%E7%AD%89%E9%9B%A8/</id>
    <published>2022-06-04T03:04:33.000Z</published>
    <updated>2022-06-04T04:03:02.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　今早我从睡醒开始到10：30，一直在浅学hexo的博客搭建，学习了简单的代码块语法，以及高亮尝试，中间浅浅地接触了yaml格式配置，highlight.js高亮。</p><p>　　然而我的早餐时间，并未开始。于是乎，到10：30时，我准备去附近的肉夹馍店……在前往的途中，遇上了这场雨，它似乎想要告诉我什么。</p><h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><ul><li>初始<br>　　简单的穿了鞋子，没有带上任何东西的我，出了门。</li></ul><p>　　开始的时候，雨犹如细丝，一丝丝地落在我的周围，我也享受这种视觉感受。</p><p>　　逐渐，雨开始大了点，雨由丝化滴，稀疏地滴落在我的衣服上。我也渐渐地靠向附近地屋檐边躲雨边前行。</p><ul><li>发生<br>　　在到达一个楼道通口的时候，细雨连成线，我就停下了前往吃饭的意识，收紧步伐，等待雨停之时……<br>　　等雨的时间里，雨落声音又带着我进入那种体验者的感觉，没有目的，没有束缚。它是想告诉我什么，停止步伐，还是继续前进。<br>　　雨的一切好像占据了我的格式塔心智，雨在告诉我它的众生相，我仿佛见到了众生在它里五味杂陈。谁能言的明“雨”的相，吾的“雨”与汝的“雨”如何相同呢？雨的到来，风的羁绊。风雨里的心仿佛都在彷徨着远方的灯塔，迫切地焦急地追逐。我如我所见，我的心在此刻亦如焦灼般的追逐。亦如我现在对找工作的态度一样。对于雨，我知道我的这份等待，雨终将会停止并等待下一次的到来，我可以等待；而我的人生，自己的工作，或许亦如所有，同样也只有等待，去明白自己的追寻，去沉淀自己的感觉，才能在等待中明白自己的所有。雨仿佛知道我的等待，越下越大，我再一次沉浸其中，然而风的存在却在呼唤着我，它的存在。我想是的，如我们所“见”，我们只在乎我们知道的。<br>　　雨，它的所有，填充着每个人的心灵，成为背景，成为旋律，成为遇见，成为我们每个的相。<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1>　　雨在述说着它的一切，而我是这场雨的一个观众。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　今早我从睡醒开始到10：30，一直在浅学hexo的博客搭建，学习了简单的代码块语法，以及高亮尝试，中间浅浅地接触了yaml格式配置，hi</summary>
      
    
    
    
    <category term="体验" scheme="http://example.com/categories/%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="人生" scheme="http://example.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建日志</title>
    <link href="http://example.com/2022/hexo%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/"/>
    <id>http://example.com/2022/hexo%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/</id>
    <published>2022-06-03T04:45:49.000Z</published>
    <updated>2022-06-05T06:38:36.973Z</updated>
    
    <content type="html"><![CDATA[<p>hexo搭建过程，部分记录</p><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/weixin_54880923/article/details/115319991">yml知识</a></li><li><a href="https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/#yaml">yml,in,markdown</a></li><li><a href="https://blog.csdn.net/weixin_42305648/article/details/114733118">代码高亮</a></li><li><a href="https://www.jianshu.com/p/65ab196bef04">代码高亮2</a><h2 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h2></li></ol><ul><li><p>普通键值对</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备注</span></span><br><span class="line"><span class="attr">key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure></li><li><p>对象键值对</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">person：</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">无为</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p>  ||</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> &#123;</span><br><span class="line">   <span class="attr">key:</span> <span class="string">value</span>,</span><br><span class="line">   <span class="attr">key:</span> <span class="string">value</span></span><br><span class="line">   &#125;   </span><br></pre></td></tr></table></figure></li><li><p>数组键值对   </p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="bullet">-</span> <span class="string">value</span> <span class="bullet">-</span> <span class="string">value</span></span><br></pre></td></tr></table></figure><p>  ||</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> [<span class="string">value</span>,<span class="string">value</span>]</span><br></pre></td></tr></table></figure></li><li><p>集合</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> [&#123;<span class="attr">key:</span> <span class="string">value</span>&#125;,&#123;<span class="attr">key:</span> <span class="string">value</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2></li><li><p>打包没有发现对应的yaml样式<br>  -&gt;尝试其他代码块,markdown语法编译器可以高亮，但hexo打包没有高亮<br>  -&gt;打包没有对应的样式包<br>  -&gt;浏览器样式区别对比<br>  -&gt;解决了，过程里发现自己在之前关闭高亮设置，hexo clean，hexo server</p></li><li><p>多行字体显示不全<br>  -&gt;浏览器排查，发现是padding属性导致字体显示空间错误。<br>  —&gt;或者改一下font-Size以及line-height<br>  -&gt;问题解决了，wrap开启true</p></li></ul><hr><h1 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h1><pre><code>分类：具有顺序和层次标签：则没有</code></pre><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/weixin_33857230/article/details/91474562">Hexo 添加分类及标签</a></li></ol><h2 id="创建选项"><a href="#创建选项" class="headerlink" title="创建选项"></a>创建选项</h2><pre><code>hexo new page[layout] categories/tags</code></pre><h2 id="追加选项"><a href="#追加选项" class="headerlink" title="追加选项"></a>追加选项</h2><pre><code>在生成的配置文件里追加type categories/tags，如果是有配置化的布局，还可以加入layout配置</code></pre><h2 id="文章使用"><a href="#文章使用" class="headerlink" title="文章使用"></a>文章使用</h2><pre><code>在文章里追加相应属性，categories/tags：- 属性1 -属性2</code></pre><hr><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ol><li>生成文件<br> hexo new [layout] fileName</li><li>草稿<br> hexo publice [layout] [title]</li><li>模板<br> 在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件。<br> 以下是您可以在模版中使用的变量：<br> layout，title，date</li><li>文章更新<br> _congfig.yml updated:true,ejs使用变量接受，应该是post.updated</li></ol><h2 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h2><p>post&#x2F;source&#x2F;page&#x3D;&gt;source&#x2F;_post\source\source&#x2F;_drafs</p><h2 id="支持格式"><a href="#支持格式" class="headerlink" title="支持格式"></a>支持格式</h2><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><hr><h1 id="标签插件语法"><a href="#标签插件语法" class="headerlink" title="标签插件语法"></a>标签插件语法</h1><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jianshu.com/p/43eb0819f51a">Hexo数据文件功能添加友情链接</a></li></ol><style>    #logo{        font-size:10px;    }</style><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><ol><li>layout目录,layout.ejs为主体框架,partial为子目录</li><li><code>&lt;span id=&quot;logo&quot;&gt;&lt;%= title %&gt;&lt;/span&gt;</code>任意parial的模板header.ejs</li><li><code>&lt;%- partial(&#39;partial/header&#39;, &#123;title: &#39;Hello World&#39;&#125;) %&gt;</code>调用</li><li>markdown支持内嵌html,css语法.</li><li>低级错误对着在线发布页面测试</li></ol><h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><ul><li>代码块<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="code">```</span></span><br><span class="line"><span class="code">code</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure></li><li>缩进<h1 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h1><strong>网址</strong></li></ul><p><strong>url_for</strong>在路径前加上根路径，从 Hexo 2.7 开始您应该使用此函数而不是 <code>config.root + path</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%- <span class="title function_">url_for</span>(path,[options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>relative</td><td>是否输出相对连接</td><td>congig.relative_link的值</td></tr></tbody></table><p><strong>relative_url</strong>取得与 from 相对的 to 路径。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%- <span class="title function_">relative_url</span>(<span class="keyword">from</span>, to) %&gt;</span><br></pre></td></tr></table></figure><p><strong>gravatar</strong>根据邮箱地址返回 Gravatar 头像 URL。<br>如果你不指定 options 参数，将会应用默认参数。否则，你可以将其设置为一个数字，这个数字将会作为 Gravatar 的大小参数。最后，如果你设置它一个对象，它将会被转换为 Gravatar 的一个查询字符串参数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%- <span class="title function_">gravatar</span>(email, [options]) %&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>在实现文件加密，ejs的JavaScript标签不能内嵌一些变量元素，可能我没有深入学习，我采用另外一种迂回方案，就是dom，和传统组件以及jsonp技术类似。<br>在阅读主题时发现另一种js用esj语法变量的方法，之前可能没有加&#x3D;&#x2F;-，还有字符串,导致无效，目前看来只适合字符串形式。</li></ul><h1 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h1><p>- </p><h1 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h1><ul><li>在一个while判断的时候，只要循环条件不被打破，就无法history.back();<br>问题解决了，明明我会的的，哼！<br>其实这个问题就是Bom API is belong to async，and while is a sync code,now if you wan to make it work frist you should break it or make it can’t work.<br>thanks 红宝书 and <a href="https://stackoverflow.com/questions/25543052/what-happens-to-code-after-history-back">thisQuesstion</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo搭建过程，部分记录&lt;/p&gt;
&lt;h1 id=&quot;技术栈&quot;&gt;&lt;a href=&quot;#技术栈&quot; class=&quot;headerlink&quot; title=&quot;技术栈&quot;&gt;&lt;/a&gt;技术栈&lt;/h1&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    <category term="hexo" scheme="http://example.com/categories/Web/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/hello-world/"/>
    <id>http://example.com/2022/hello-world/</id>
    <published>2022-06-03T03:45:54.267Z</published>
    <updated>2022-06-05T04:24:46.673Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
  </entry>
  
</feed>
