<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  <subtitle>MaXuFeng</subtitle>
  <link href="https://fireman-34.github.io/atom.xml" rel="self"/>
  
  <link href="https://fireman-34.github.io/"/>
  <updated>2022-06-08T06:50:50.797Z</updated>
  <id>https://fireman-34.github.io/</id>
  
  <author>
    <name>Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022-06-08-散步小记</title>
    <link href="https://fireman-34.github.io/2022/2022-06-08-%E6%95%A3%E6%AD%A5%E5%B0%8F%E8%AE%B0/"/>
    <id>https://fireman-34.github.io/2022/2022-06-08-%E6%95%A3%E6%AD%A5%E5%B0%8F%E8%AE%B0/</id>
    <published>2022-06-08T03:13:19.000Z</published>
    <updated>2022-06-08T06:50:50.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="散步小记"><a href="#散步小记" class="headerlink" title="散步小记"></a>散步小记</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>今天，我稍微慵懒。赖了一小时的床，又看了会一些微信公众号的文章，才慢吞吞地起来刷牙抹脸。晨起，没有明媚的感觉，黄褐色的光照耀在我租房处的侧窗。</p><p>窗户没有纱窗，夜里可能有一些意外的访客。微微透出小孔，让租房内有一丝喘气的机会。四周房屋紧挨着，密不透风，而我是这栋楼的一层的一个租户。</p><p>屋内夏天潮湿度65%以上，我已经住了有些许时间。床底潮湿味时而让我觉得慵懒不想做任何事情，情绪的内耗和我不希望别人承受自己的负能量，就把自己闷在一边，也感谢父母的理解和支持，让我起码有了苟延残喘的机会。</p><p>我就像一团湿乎乎的泥巴，散发着黏糊糊的味道，还有这个社会扔进泥巴里的东西。</p><p>我想起深渊和<strong>泥团</strong>这个朋友，今天好像有这个缘分，但我本能地嫌弃，很抱歉，<strong>泥团</strong>，抱抱*<em>(￣︶￣</em>))**，举高高！</p><p>租房好歹有一个可以遮风挡雨的地方，但有时我在渴望更阳光的地方生长。</p><p>在写这篇小记的时候，突然想起一个地方“监狱”，阴暗潮湿密不透风还有人类排污的地方。</p><p>我的博客也就像树洞或者可以释放存放的东西，我把自己的一些真实感受留到自己的地方。</p><p>今天早餐时间倒是提前了一个小时，九点半就吃上热乎乎的早餐，记得学生时代，每天早餐都能准时享受父母的备餐。而现在进入社会，我变了很多，变得更加不知节制。</p><p>我觉得自己可能是个创造探索类型的工作狂，但是精力有限。确实是个矛盾的特点，而且也需要休息，这个社会可能不需要我这种低学历的探索创造者，只需要我像个底层一样的工作，奉献就足够了，另一个矛盾的特点就是我的体质比同龄人弱，我需要更多的休息，然而这个社会不需要我这种没什么突出的工种，我就像边缘一样。</p><p>等一下加入我的自我介绍里面，o(<em>￣▽￣</em>)ブ。</p><h2 id="化缘"><a href="#化缘" class="headerlink" title="化缘"></a>化缘</h2><h3 id="扫把"><a href="#扫把" class="headerlink" title="扫把"></a>扫把</h3><p>出门了，我向往日行走一般，经过附近的垃圾堆，清洁阿姨又如往日在整理搬运垃圾。</p><p>今天见到她，拿着硬毛扫把在地上扫垃圾。</p><p>让我想起租房的那把软毛扫把，硬和软毛的区别……</p><h3 id="草木和风"><a href="#草木和风" class="headerlink" title="草木和风"></a>草木和风</h3><p>它们在和我打招呼。</p><h3 id="肯德基的广告音响"><a href="#肯德基的广告音响" class="headerlink" title="肯德基的广告音响"></a>肯德基的广告音响</h3><p>嘿嘿，触发了一个灵感。不可说，不可说。</p><p>(ノへ￣、)我的梦想清单有多了一条，别人是没有梦想，我是<strong>白日梦</strong>太多了。</p><h3 id="街头推销员"><a href="#街头推销员" class="headerlink" title="街头推销员"></a>街头推销员</h3><p>​回来的途中，我又被一个美团买菜的推销员盯上，这次是个女孩子，大概也是出来工作，背着书包，盯着往来的人。</p><p>上来，我一看到美团买菜，就头疼。</p><p>​上一次，在一个暴雨的夜晚被一个刚找工作化着廉价妆骨瘦如柴的小姐姐，哭零零地求我下载美团买菜 APP 。我开始是拒绝的，后面是小姐姐哭着喊刚出来找工作不容易，我想起自己的过往，不由心动，又心一横，拒绝。最后，我还是心软了。小姐姐”打蛇上棍“，我注册完 APP ，又鼓动我买东西。最后我挑三拣四，才选了纸。然后，她也就被上司叫回去了，暴雨夜出来工作确实不太安全。当天晚上的买菜的送货速度到是很快，我回租房不久，就收到消息了，又急匆匆地跑出来。</p><p>​现在是背书包的小姐姐，微微黑皮肤，戴眼镜。</p><p>​我：“我已经下载过，真的不需要。”</p><p>​小姐姐：“没关系，现在有活动。你看这里，有很多很多零食。”</p><p>​我：“不需要，我不好吃零食。&#x2F;(ㄒoㄒ)&#x2F;~~。”</p><p>​内心波动：我本来也是贪吃的人，只是肠胃真的不能吃，水果都很少碰。</p><p>​小姐姐：”拿纸巾呢？“</p><p>​我：”我租房还有一大卷呢。“</p><p>​小姐姐：”你就看看吗？“</p><p>​我：“抱歉，我真的没有什么想要购买的感觉，而且我流量也不足。”</p><p>​小姐姐：“那我就给你开个热点如何？”</p><p>​我：“不需要，我手机有近两百个APP了。&#x2F;(ㄒoㄒ)&#x2F;~~”</p><p>​内心波动：为什么？为什么要戳我伤疤，每一个善良的人拒绝的理由一定是戳中内心的痛楚，嗯~ o(<em>￣▽￣</em>)o。</p><p>​我：“就这样吧。我要回去了。”</p><p>​然后一屁绝尘。</p><p>​我就是我，潇洒如我。</p><h3 id="半路肚子疼-ノへ￣、"><a href="#半路肚子疼-ノへ￣、" class="headerlink" title="半路肚子疼(ノへ￣、)"></a>半路肚子疼(ノへ￣、)</h3><p>在拒绝不久，肚子疼就出来。</p><p>我正在想着这女孩推销就像我找工作一样，都是处于没有需求的地位，内心又动了恻隐之心，要不要回头帮个忙。</p><p>这是来自一股强烈的腹痛的感受，我微弓着向租房处地方前行。</p><p>我脑海中不由：“难道我得罪这位推销员，其实是一名‘天之娇女’了。我的傲慢，我忏悔，我的……肚子疼！”</p><p>不仅悲从中来，一瘸一拐的前进……</p><p>回到租房处，如释重负。</p><h2 id="缘离"><a href="#缘离" class="headerlink" title="缘离"></a>缘离</h2><p>以后再说。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;散步小记&quot;&gt;&lt;a href=&quot;#散步小记&quot; class=&quot;headerlink&quot; title=&quot;散步小记&quot;&gt;&lt;/a&gt;散步小记&lt;/h1&gt;&lt;h2 id</summary>
      
    
    
    
    <category term="体验" scheme="https://fireman-34.github.io/categories/%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="人生" scheme="https://fireman-34.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>nodejs个人工具编写错误汇总</title>
    <link href="https://fireman-34.github.io/2022/nodejs%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%BC%96%E5%86%99%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/"/>
    <id>https://fireman-34.github.io/2022/nodejs%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%BC%96%E5%86%99%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</id>
    <published>2022-06-07T14:36:53.000Z</published>
    <updated>2022-06-08T14:08:23.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><ol><li>fsPromise.readDir path 报错：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">The</span> <span class="string">&quot;path&quot;</span> argument must be <span class="keyword">of</span> type string or an instance <span class="keyword">of</span> <span class="title class_">Buffer</span> or <span class="variable constant_">URL</span>. <span class="title class_">Received</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>错误的原因是空字符进入readDir</li><li>无后缀名文件被识别成文件夹进入读取文件路径里面<br>暂时解决方法写了简单地忽略判定，如果写负责可以加一个配置，以及读取，以及生成相应功能。<br>另外有空地话，可以多研究fs模块，或者采用忽略异常处理。</li><li>使用函数解构对象参数至少需要一个对象{}，否则会报<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TypeError</span>: <span class="title class_">Cannot</span> read properties <span class="keyword">of</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li><li>fs&#x2F;Promise输出二进制流，使用encoding属性配置对应字符集即可。</li><li>reduce&#x2F;filter忘记如何写串行了，好想用RX。</li></ol><h1 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h1><ol><li>多路径扁平读取文件夹整合输出所在路径，一维数组。</li><li>路径深读读取并生成路径，一维数组。</li><li>一维路径数组识别文件和文件夹并输出，有Bug，暂时不能识别无后缀文件。</li><li>一维文件数组识别转文件格式key的路径对象。</li><li>简单地读取提供打包插件功能的函数，应该设计成实体对象。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代码部分过程化，更加建议采用语义化，还有面向对象的涉及不太好。</p><p>部分变量名字单复数造成写代码易错，建议统一把复数形式放最后面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;fsPromise.readDir path 报错：&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="nodejs" scheme="https://fireman-34.github.io/categories/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://fireman-34.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Hexo性能优化记录</title>
    <link href="https://fireman-34.github.io/2022/Hexo%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://fireman-34.github.io/2022/Hexo%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2022-06-07T06:53:47.000Z</published>
    <updated>2022-06-08T13:51:58.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  本来我是打算先写一篇关于vim的笔记。其实我觉得自己的博客没有自己真实的技术输出，所以这些看起来文章看起来更多像自己的笔记。<br>  我是用的是谷歌的“开发者工具”进行来实施对应优化的。</p><p>之前更多是采用<code>Webpack</code>的构建<code>plugin</code>进行优化，所以这对于我来说算是一个新的尝试。</p><h1 id="英文词汇"><a href="#英文词汇" class="headerlink" title="英文词汇"></a>英文词汇</h1><p>Accessibility 可访问性</p><p>case n. 情况</p><p>custom n. 习惯的，v.自定义 文章里面应该指的是自定义属性之类的</p><p>collapse n. 列，简写 Col</p><p>manner n. 样子，礼貌</p><p>Performance 表演，表现</p><p>Prctices 实践，惯例</p><p>sensitive a. 敏感的，灵敏的</p><p>Treat vt. 视为，n 款待</p><h1 id="感谢-THANKS"><a href="#感谢-THANKS" class="headerlink" title="感谢 THANKS"></a>感谢 THANKS</h1><p><a href="https://webmasters.stackexchange.com/questions/56561/is-gzip-compression-available-for-github-pages">Is gzip compression available for GitHub pages?</a></p><p><a href="https://blog.skk.moe/post/improve-fcp-for-my-blog/">skk blog</a></p><p><a href="https://segmentfault.com/a/1190000039843064?utm_source=tag-newest">Layout Shift</a></p><p><a href="https://www.npmjs.com/package/html-minifier">html-miniifier</a></p><h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ul><li>Layout.shift 可视元素渲染起始位置</li><li>Frist Contentful Paint 首次加载时间</li></ul><h1 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h1><ul><li><p><strong>Serve images in next-gen formats</strong> 2.2 s 建议我采用 Webp 或者 AVIF 格式图片。</p></li><li><p><strong>Efficiently encode images</strong> 1.5 s 建议我采用压缩图片和 使用更少的请求</p></li><li><p>Eliminate render-blocking resources 0.66 s 压缩资源</p></li><li><p>Use HTTP&#x2F;2 0.3s 使用HTTP&#x2F;2协议</p></li><li><p><strong>Image elements do not have explicit <code>width</code> and <code>height</code></strong> 图像无明显宽高</p></li><li><p><strong>Serve static assets with an efficient cache policy 17 resources found</strong>应该是配置请求策略，后面转图床或者个人服务器。</p></li><li><p><strong>Minimize main-thread work</strong> 7.6 s 考虑减少分析、编译和执行 js 所花费的时间。</p></li><li><p>User Timing marks and measures 用户计时标志和措施</p></li><li><p>Keep request counts low and transfer sizes small 保持请求体积合理化</p></li><li><p>Largest Contentful Paint element 最大绘制内容</p></li><li><p>Avoid large layout shifts 避免大的布局变化</p></li><li><p>Avoid long main-thread tasks </p></li><li><p>Avoid non-composited animations</p></li><li><p><strong>Buttons do not have an accessible name</strong></p></li><li><p>**Links do not have a discernible name **</p></li><li><p>BEST PRACTICES <code>[user-scalable=&quot;no&quot;]</code> is used in the <code>&lt;meta name=&quot;viewport&quot;&gt;</code> element or the <code>[maximum-scale]</code> attribute is less than 5.</p></li><li><p>Background and foreground colors do not have a sufficient contrast ratio.背景色和前景色没有足够的对比度。</p></li><li><p>Browser errors were logged to the console 控制台打印错误 bulma sweetaler2</p></li><li><p>Links are not crawlable</p></li><li><p>Web app manifest or service worker do not meet the installability requirements </p></li><li><p><input disabled="" type="checkbox"> search.xml访问速度慢,search插件用的是老的数据结构能否使用json格式之类地进行，或者更加轻便的数据格式</p></li><li><p><input disabled="" type="checkbox"> 工具库尝试改cdn，需要降级方案支持</p></li><li><p><input disabled="" type="checkbox"> 多域名多id方案？</p></li><li><p><input disabled="" type="checkbox"> 压缩模块</p></li></ul><h1 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h1><ul><li><input disabled="" type="checkbox"> 图片资源优化可选策略<ul><li><input disabled="" type="checkbox"> <del>替换格式</del>，浏览器有一部分不支持，图床也要搞，还要搞个多图方案，算了吧</li><li><input checked="" disabled="" type="checkbox"> 压缩体积，采用tinify压缩，自己写启动脚本</li><li><input disabled="" type="checkbox"> 懒加载处理，以后再说</li><li><input disabled="" type="checkbox"> 小图预加载，搞到图床再说</li><li><input disabled="" type="checkbox"> 骨架渲染，现在没空</li><li><input disabled="" type="checkbox"> 分离静态资源，搞到图床再说</li></ul></li><li><input disabled="" type="checkbox"> 字体资源优化<ul><li><input disabled="" type="checkbox"> 搞到访问好的静态服务器，最好是 free，主题里面竟然下载全部 UI 库，不过图标真的可以过我审美。</li></ul></li><li><input checked="" disabled="" type="checkbox"> 按钮添加可访问名称，语义化处理，seo优化</li><li><input checked="" disabled="" type="checkbox"> 图片悬浮文本，语义化处理，seo优化</li><li><input checked="" disabled="" type="checkbox"> 请求优化，开启 gzip 压缩</li><li><input disabled="" type="checkbox"> html 压缩，css 压缩，js 压缩</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  本来我是打算先写一篇关于vim的笔记。其实我觉得自己的博客没有自己真实的技术输出，所以这些看起来文章看起来更多像自己的笔记。&lt;br&gt;  </summary>
      
    
    
    
    <category term="web" scheme="https://fireman-34.github.io/categories/web/"/>
    
    <category term="hexo" scheme="https://fireman-34.github.io/categories/web/hexo/"/>
    
    
    <category term="web,性能" scheme="https://fireman-34.github.io/tags/web-%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>再临梦中等雨</title>
    <link href="https://fireman-34.github.io/2022/%E5%86%8D%E4%B8%B4%E6%A2%A6%E4%B8%AD%E7%AD%89%E9%9B%A8/"/>
    <id>https://fireman-34.github.io/2022/%E5%86%8D%E4%B8%B4%E6%A2%A6%E4%B8%AD%E7%AD%89%E9%9B%A8/</id>
    <published>2022-06-07T02:54:47.000Z</published>
    <updated>2022-06-07T03:54:25.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又一次10：30左右的早餐时间。从七点半到现在我都在改进自己的博客系统，中间出了cdn资源请求失败导致长时间白屏渲染。</p><p>这个问题说小也不算小，说大也不算大，采用错误边界处理和降级CDN策略就能解决大半个问题，但我也不太想搞，因为量级很小，方案的话又需要投入钱财和精力。</p><p>这次刚好是吃完早餐——肉夹馍和红豆粥以及卤蛋的时间，就开始下雨了。</p><p>我有点焦急，又有想等待……</p><p>我本来打算去散步的，现在看来需要的是回我的租房处了。</p><h1 id="等待的思绪"><a href="#等待的思绪" class="headerlink" title="等待的思绪"></a>等待的思绪</h1><h2 id="焦急"><a href="#焦急" class="headerlink" title="焦急"></a>焦急</h2><p>起初，我亦是焦虑，心里盼着回去的念头。</p><p>尔后，想起自己曾经在雨中所思，不由一停，抛下那个焦虑的念头。</p><p>静静地在肉夹馍店门口等待着雨。</p><p>然而雨从小于到雨突然大雨，雨在宣告和邀请我去倾听它的世界。</p><p>往来的行人则是举着伞匆匆忙忙地经过我眼前地小道，在这条过客路上，大概有三位肤白貌美的美女踩着若隐若现的鞋子，大咧咧地展示着她的肤质和肤色，我不好意思地多瞄了几眼，脸红 ing。</p><h2 id="受邀"><a href="#受邀" class="headerlink" title="受邀"></a>受邀</h2><p>雨的世界，哗啦哗啦地雨点像玉珠落盘一样，雨点溅起一个个环形水圈。</p><p>我的豪情壮志去了哪里，多愁善感，无病呻吟的青年啊，那就是我。</p><p>我来了，雨，我的一位朋友。</p><h2 id="雨落地的样子"><a href="#雨落地的样子" class="headerlink" title="雨落地的样子"></a>雨落地的样子</h2><p>雨不断落入在地面薄薄的一层水面，让我想起了自己根据别人写的简易雨的特效，那时候的我用简单的线条描述着雨的感觉，落入地面微微溅起的水花，然而我还是那份稚嫩的感觉，知识的差距只能让我简单地模仿这个水花……</p><p>雨的视觉，雨的声效，都是我们通过解构主义获取的感官元素，它让我们拼出了简单的感官集合，然而这不格式塔，没有“俺寻思”之力。</p><p>这就是计算机Keep simple 原则，我们对与不必要的元素进行删减，这也是虚拟和现实世界的差别之一。</p><p>物理引擎中的雨特效是建立在真实物理还是只是简单的绘制上去……</p><p>我的思绪也跳到另一个地方，街上一辆车停留在马路中央，车主则是去了一个地方取东西。</p><h2 id="无效的鸣笛声"><a href="#无效的鸣笛声" class="headerlink" title="无效的鸣笛声"></a>无效的鸣笛声</h2><p>随着等待车辆渐渐增多，等待最前头鸣笛之后，就是后面车辆此起彼伏，共同的鸣笛。</p><p>他们都在释放着自己的不满，鸣笛声其实已经让生效，然而他们依旧愿意用这种方式打破周遭的宁静。</p><p>对于停在马路中央的车主，他显然是罪魁祸首。然而他并没有受到太多的惩罚，反而是周遭的事物要承受这样的苦果。</p><p>鸣笛许久，车主才慢悠悠地出来，拿着取到东西上了车，没有一丝对不起，没有一丝愧疚。一部分车辆已经扭到在逆道上行驶。</p><p>我想起分形与完形的概念，如我们所见。我们要的美好，它的分形也必然只有美好，可惜做不到惭愧反思纪律进化，剩下的也只有逆向淘汰。</p><p>有时我在羡慕偶然间看到《明日方舟》里的一个物种~海斯，它们可以团结一致，互相理解，一起进化。</p><p>又如群星里格式塔心智。</p><p>共业来临，谁会是真正的幸运儿呢？</p><h2 id="雨的挽留"><a href="#雨的挽留" class="headerlink" title="雨的挽留"></a>雨的挽留</h2><p>正当我以为雨停了，在回去准备拿出健康码的时候，雨又热情的挽留我。我退回肉夹馍店，欣赏着雨和往来的美女。</p><p>雨，我的朋友。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>敏感给了我自己的世界，</p><p>我能体验这个世界更多的感觉，</p><p>我有时会因为敏感而低落，</p><p>然而我还是渴望有它的存在，</p><p>它让我如此真实，</p><p>如此迷人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;又一次10：30左右的</summary>
      
    
    
    
    <category term="体验" scheme="https://fireman-34.github.io/categories/%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="人生" scheme="https://fireman-34.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>study-from-云游君</title>
    <link href="https://fireman-34.github.io/2022/study-from-%E4%BA%91%E6%B8%B8%E5%90%9B/"/>
    <id>https://fireman-34.github.io/2022/study-from-%E4%BA%91%E6%B8%B8%E5%90%9B/</id>
    <published>2022-06-06T11:10:41.000Z</published>
    <updated>2022-06-08T05:08:18.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://www.yunyoujun.cn/">云游君的小站</a></p><p><a href="https://blog.csdn.net/dcl199728/article/details/123380485"><code>css</code>中的<code>var()</code>和<code>:root</code></a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/var">mdn</a></p><p><a href="https://diff.blog/">Diff.Blog</a><br>感谢Diff.Blog收录。</p><h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><ol><li><p><code>:root</code>里面可以设置公用颜色属性 <code>--bg-color:#fff</code><br>然后颜色用 <code>var(--bg-color)</code>;</p></li><li><p>background-img设置渐进色,linear&#x2F;radio gradient;</p></li><li><p>鼠标悬浮显示特效</p></li></ol><ul><li><p>第一种,文字左右两角悬浮<br>this is Effect 效果 ↓</p><p class="hover-text"  style="text-align:center;">Hello,World.click Here you can know it's workd.</p>首先，我们用一种样式名<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-hover&quot;</span>&gt;</span></span><br><span class="line">   //text </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义两个伪类元素，让其获得边框,  并绝对定位该元素于悬浮触发器元素，设置过渡属性0.3s,运动采用贝塞尔曲线,透明度为0，变形属性设置移动。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-hover</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-hover</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.text-hover</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    position:absolute;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">10px</span>;<span class="attribute">height</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.17</span>,<span class="number">0.67</span>,<span class="number">0.05</span>,<span class="number">1.29</span>);</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-text</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">10px</span>,<span class="number">10px</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-text</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">10px</span>,-<span class="number">10px</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置悬浮样式，触发过度效果</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hover-text</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,<span class="selector-class">.hover-text</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.yunyoujun.cn/&quot;&gt;云游君的小站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="web" scheme="https://fireman-34.github.io/categories/web/"/>
    
    
    <category term="css" scheme="https://fireman-34.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>hexo深入再学习</title>
    <link href="https://fireman-34.github.io/2022/hexo%E6%B7%B1%E5%85%A5%E5%86%8D%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fireman-34.github.io/2022/hexo%E6%B7%B1%E5%85%A5%E5%86%8D%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-05T10:02:57.000Z</published>
    <updated>2022-06-08T13:38:31.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://juejin.cn/post/6844903469669679117">hexo设计模式探索</a></p><p><a href="https://www.jianshu.com/p/56b9cb8ac2ea">node之proce模块</a></p><p><a href="https://blog.csdn.net/fangxuan1509/article/details/107469465">minimist命令行引擎</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf原型组合</a></p><p><a href="https://baike.baidu.com/item/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E"> 模板引擎</a></p><p><a href="http://nodejs.cn/api/vm.html">nodejs vm模块</a></p><p><a href="https://www.jianshu.com/p/f935e5459c49">简书-个人学习</a></p><h1 id="主题文件夹功能探索"><a href="#主题文件夹功能探索" class="headerlink" title="主题文件夹功能探索"></a>主题文件夹功能探索</h1><h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><p><strong>ejs</strong>文件或者其他模板文件。</p><h3 id="条件函数使用"><a href="#条件函数使用" class="headerlink" title="条件函数使用"></a>条件函数使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%= is_post()?&quot;class1&quot;:&quot;class2&quot; %&gt;</span><br></pre></td></tr></table></figure><h1 id="HEXO设计模式笔记"><a href="#HEXO设计模式笔记" class="headerlink" title="HEXO设计模式笔记"></a>HEXO设计模式笔记</h1><p>静态网站生成器以及api文档。</p><h2 id="框架特色"><a href="#框架特色" class="headerlink" title="框架特色"></a>框架特色</h2><p>​nodejs运行环境，速度块，扩展能力强，插件丰富，主题开发，一键部署。</p><h2 id="盲点"><a href="#盲点" class="headerlink" title="盲点"></a>盲点</h2><h3 id="process-argv"><a href="#process-argv" class="headerlink" title="process.argv"></a>process.argv</h3><p>process.argv返回一个包含所有启动Nodejs的参数，第一个参数为process.execPath,第二个为当前执行js文件的路径，其它为其它命令行参数。</p><h3 id="minimist"><a href="#minimist" class="headerlink" title="minimist"></a>minimist</h3><p>轻量级nodejs命令行解析引擎。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args=<span class="title function_">minimist</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> cmd=args.<span class="property">_</span>.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">var</span> hexo=<span class="keyword">new</span> <span class="title class_">Hexo</span>();</span><br><span class="line">hexo.<span class="title function_">init</span>();</span><br><span class="line">hexo.<span class="title function_">call</span>(cmd,args);</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>The store means  a db in program.</p><p>作者的意思大概是事件逻辑存储在store，依靠store进行耦合工作。</p><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><p>函数的意思，或者说可以通过它来执行某些逻辑。</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><h3 id="node-vm"><a href="#node-vm" class="headerlink" title="node vm"></a>node vm</h3><p>v8虚拟机，无安全机制，所以使用者自行担保安全机制。</p><h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><p>在命令行模块，Hexo选择使用minimist来解析命令行参数得到一个js对象，并建立一个Hexo实例并初始化，最后通过实例对象call方法传递命令行指令。</p><h2 id="Hexo入口模块设计"><a href="#Hexo入口模块设计" class="headerlink" title="Hexo入口模块设计"></a>Hexo入口模块设计</h2><p>采用构造-原型组合定义类，采用组合继承的方式继承Node的EventEmitter模块，相对简单的完成on与emit的发布订阅。</p><p>实例化阶段，保存所编译文件的存放路径，输出路径，以及其它脚本，插件，主题等所处的路径，保存环境变量，即命令行参数，版本信息号等基本信息。</p><p>创建扩展对象按不同功能进行分类，作用是创建store，用于注册句柄，获取句柄。</p><p>扩展类型控制台(Console)、部署器(Deployer)、过滤器(Filter)、生成器(Generator)、辅助函数(Helper)、处理器(Processor)、渲染引擎(Renderer)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hexo</span>(<span class="params">base,args</span>)&#123;</span><br><span class="line">    <span class="title class_">EventEmitter</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">public_dir</span>=path.<span class="title function_">join</span>(base,<span class="string">&#x27;public&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">source_dir</span>=path.<span class="title function_">join</span>(base,<span class="string">&#x27;source&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">extend</span>=&#123;</span><br><span class="line">        <span class="attr">console</span>:<span class="keyword">new</span> extend.<span class="title class_">Console</span>();</span><br><span class="line">        <span class="attr">generator</span>:<span class="keyword">new</span> extend.<span class="title class_">Generator</span>();</span><br><span class="line">    <span class="attr">processor</span>:<span class="keyword">new</span> extend.<span class="title class_">Processor</span>();</span><br><span class="line">    <span class="attr">renderer</span>:<span class="keyword">new</span> extend.<span class="title class_">Renderer</span>();</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//等同于Object.setPrototypeOf(Hexo.prototype,EventEmitter.prototype);</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).<span class="title function_">inherits</span>(<span class="title class_">Hexo</span>,<span class="title class_">EventEmitter</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换句话说，扩展对象是个容器，一个事件注册机。</p><p>接下来要做的是Hexo初始化阶段，加载Hexo内置插件，不断增加扩容工作，以渲染引擎为例，向extend.renderer注册渲染过程处理函数，在其它模块中就可以很方便的从hexo的上下文去调用渲染。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Hexo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//加载内部插件</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/console&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/generator&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/processor&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;plugins/renderer&#x27;</span>)(<span class="variable language_">this</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//plugins/renderer注册渲染函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> renderer=hexo.<span class="property">extend</span>.<span class="property">renderer</span>;</span><br><span class="line">    renderer.<span class="title function_">register</span>(<span class="string">&#x27;swig&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./swig&#x27;</span>));</span><br><span class="line"> renderer.<span class="title function_">register</span>(<span class="string">&#x27;ejs&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./ejs&#x27;</span>));</span><br><span class="line"> renderer.<span class="title function_">register</span>(<span class="string">&#x27;yml&#x27;</span>,<span class="string">&#x27;josn&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./yaml&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用渲染器 </span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exprots</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">     <span class="keyword">var</span> renderer=hexo.<span class="property">extend</span>.<span class="property">renderer</span>;</span><br><span class="line">     <span class="keyword">return</span> renderer.<span class="title function_">get</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>hexo 还能加载外部插件,通过 npm 的方式存放在 node_module 或目录 script 里面，巧妙的是，插件内部无效引入 hexo 对象，可以直接hexo变量来访问上下文，正是由于框架采用 Node 中 vm 模块(Virtual Machine) 模块来加载 js 文件，相当于模板引擎实现原理中的new Function或者 eval 来解析并执行字符串代码。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载外部插件</span></span><br><span class="line"><span class="title class_">Hexo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">loadPlugin</span>=<span class="keyword">function</span>(<span class="params">path</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">script</span>)&#123;</span><br><span class="line">       script=<span class="string">`(function(hexo)&#123;`</span>+script+<span class="string">&#x27;&#125;)&#x27;</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">    retutn vm.<span class="title function_">runInThisContext</span>(script,path)(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hexo编译模块设计"><a href="#Hexo编译模块设计" class="headerlink" title="Hexo编译模块设计"></a>Hexo编译模块设计</h2><p>预期用户命令接口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>首先往 Hexo 扩展对象 Console 中注册 &#x3D;&#x3D;generate&#x3D;&#x3D; 函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">register</span>(<span class="string">&#x27;generate&#x27;</span>,<span class="string">&#x27;Generate static files&#x27;</span>,&#123;</span><br><span class="line">   <span class="attr">options</span>:[</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-d,--deloy&#x27;</span>,<span class="attr">desc</span>:<span class="string">&#x27;Deploy after generated&#x27;</span>&#125;,</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-f,--force&#x27;</span>,<span class="attr">desc</span>:<span class="string">&#x27;Force regenerate&#x27;</span>&#125;,</span><br><span class="line">       &#123;<span class="attr">name</span>:<span class="string">&#x27;-w,--watch&#x27;</span>,<span class="attr">dec</span>:<span class="string">&#x27;Watch file changes&#x27;</span>&#125;,</span><br><span class="line">   ]</span><br><span class="line">&#125;,<span class="built_in">require</span>(<span class="string">&#x27;/generate&#x27;</span>))</span><br></pre></td></tr></table></figure><p>generate 函数用于生成目标文件夹，从 Hexo 路由模块中取得所由需要生成目标文件的路径，调用fs输出文件，在此之前，首先对源文件进行预处理，把路径写入路由。由于Hexo本身设计的特点，源文件又分为内容和主题两部分，分别为放在 source 和theme文件夹中，所以得调用 process 函数分别对它们进行预处理。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    hexo.<span class="property">source</span>.<span class="title function_">process</span>();</span><br><span class="line">    hexo.<span class="property">theme</span>.<span class="title function_">process</span>();</span><br><span class="line">    routerList.<span class="title function_">forEach</span>(<span class="function"><span class="params">path</span>=&gt;</span><span class="title function_">writeFile</span>(path));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hexo 抽象出一层公用模块用来管理所有处理器，命名为Box，相当于一个容器，统一管理处理器的添加删除执行监控，并分别为source和theme创建实列，Box原型如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">base</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">base</span>=base;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>=[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addProcessor</span>=<span class="keyword">function</span>(<span class="params">pattern,fn</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        pattern,</span><br><span class="line">        <span class="attr">process</span>:fn,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">process</span>=<span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processors</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">processor</span>=&gt;</span>processor.<span class="title function_">process</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了Box容器，接下来要做的就是往容器注入处理器，同样用插件形式往扩展对象extend中注册句柄，在注入到 Box 容器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> &#123;processor&#125;=hexo.<span class="property">extend</span>;</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="built_in">require</span>(<span class="string">&#x27;./asset&#x27;</span>)(hexo);</span><br><span class="line">    processer.<span class="title function_">register</span>(obj.<span class="property">pattern</span>,obj.<span class="property">process</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以markdown文件的处理为例，成功匹配到文件扩展名，调用hexo-font-matter利用正则表达式匹配解析文件，分离顶部元素据与主题内容，类似于gray-matter，把元数据与内容key&#x2F;value的形式转换为一个js对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params">hexo</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">patter</span>:<span class="regexp">/\.md/</span>,</span><br><span class="line">        <span class="attr">process</span>:<span class="keyword">function</span>(<span class="params">path</span>)&#123;</span><br><span class="line">            <span class="title function_">readFile</span>(path,<span class="keyword">function</span>(<span class="params">err,content</span>)&#123;</span><br><span class="line">               <span class="keyword">var</span> data=<span class="built_in">require</span>(<span class="string">&#x27;hexo-front-matter&#x27;</span>)(content);</span><br><span class="line">                data.<span class="property">source</span>=path;</span><br><span class="line">                data.<span class="property">raw</span>=content;</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//markdown文件</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">title:hello,</span></span><br><span class="line"><span class="string">layout:home</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#hexo</span></span><br><span class="line"><span class="string">A</span> <span class="string">fast,simple&amp;porwerful</span> <span class="string">blog</span> <span class="string">framework</span></span><br></pre></td></tr></table></figure><p>解析成&#x3D;&gt;</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">layout</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">_content</span>:<span class="string">&#x27;# Hexo\n fast,simple&amp;porwerful blog framework&#x27;</span>,</span><br><span class="line">    <span class="attr">source</span>:<span class="string">&#x27;README.md&#x27;</span>,</span><br><span class="line">    <span class="attr">raw</span>:<span class="string">`---\ntitile:hello\n---# Hexo\n fast,simple&amp;porwerful blog framework`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 下一步，Hexo定义过滤器的概念(Filter)的概念，借鉴于Wordpress，用于在模板渲染前后修改具体数据，也可以把它看成钩子，例如使用 marked 编译 markdown 文件内容。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo.<span class="title function_">execFilter</span>(<span class="params"><span class="string">&#x27;before_generate&#x27;</span>,<span class="keyword">function</span>(data)</span>)&#123;</span><br><span class="line">     hexo.<span class="property">render</span>.<span class="title function_">render</span>(&#123;</span><br><span class="line">        <span class="attr">text</span>:data.<span class="property">_content</span>,</span><br><span class="line">        <span class="attr">path</span>:data.<span class="property">source</span>,</span><br><span class="line">        <span class="attr">engine</span>:data.<span class="property">engine</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后增加一条 content 属性，带有标签与类名的markdown html 片段。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">layout</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">_content</span>:<span class="string">&#x27;# Hexo\n fast,simple&amp;porwerful blog framework&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>:<span class="string">&#x27;&lt;h1 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;Hexo&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;fast,simple&amp;porwerful blog framework&lt;/p&gt;&#x27;</span></span><br><span class="line">    <span class="attr">source</span>:<span class="string">&#x27;README.md&#x27;</span>,</span><br><span class="line">    <span class="attr">raw</span>:<span class="string">`---\ntitile:hello\n---# Hexo\n fast,simple&amp;porwerful blog framework`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到页面数据后，进入模板引擎渲染阶段，Hexo 本身并不带模板引擎，需要借助第三方库，如ejs，并通过一个适配器，把原接口转换为需求接口，向扩展对象extend.render中注册模板解析函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexok.<span class="property">extend</span>.<span class="property">renderer</span>.<span class="title function_">register</span>(<span class="string">&#x27;ejs&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="keyword">function</span>(<span class="params">data,locals</span>)&#123;</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>).<span class="title function_">render</span>(data,locals) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>模板引擎解析后的函数在hexo.theme对象中， 以文件名作为key，后续渲染只需要layout就能找到指定的渲染函数，注入locals变量(上面markdown解析后的js对象+扩展对象extend.helper定义变量，函数)，生成最终文本字符串。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> view=hexo.<span class="property">theme</span>.<span class="title function_">getView</span>(data.<span class="property">layout</span>);</span><br><span class="line">view.<span class="title function_">render</span>(lcoals);</span><br></pre></td></tr></table></figure><p>最后通过Node fs 模块将内容输出public目标。</p><p>回顾所有的工作流程，可以看作是</p><p>cli&#x3D;&gt;hexo.init&#x3D;&gt;plugin.load&#x3D;&gt;process&#x3D;&gt;filter&#x3D;&gt;render&#x3D;&gt;generate</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>此外，Hexo还有很多优秀的设计模式</p><h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><p>Hexo 引入 json 数据库 warehouse ,也是作者自己开发的一个数据库驱动，api 和 Mongoose 相差无几。在架构中角色充当一个中介者，存储临时数据，或者持久化数据数据存储，如博客的发表时间，还可以作为缓存层，比对文件修改时间，跳过无修改文件的编译过程，减少二次编译的时间。</p><h3 id="异步方案"><a href="#异步方案" class="headerlink" title="异步方案"></a>异步方案</h3><p>在大量异步回调文件会造成代码阅读性下降。</p><p>Hexo 引入 Promise 库  bindBrid,  内置丰富 API，</p><p>很方便的处理异步的流程控制，如使用 Promise.promisify(require(‘fs’).readFile)可以原生 fs 模块包装成一个promise对象。</p><h3 id="通用日志模块"><a href="#通用日志模块" class="headerlink" title="通用日志模块"></a>通用日志模块</h3><p>把Log划分为六个级别，’TRACE’,’DEBUG’,’INFO,’WARN’,’FATAL’,不同级别输出不同的格式与颜色(chalk) ,并提供命令含接口，如果带有–debug字段，则Log自动降级为’TRACE’。</p><hr><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>_config.yml</p><p>markdown.md Front-matter</p><h3 id="多语言支持"><a href="#多语言支持" class="headerlink" title="多语言支持"></a>多语言支持</h3><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>基本就是网站布局，如果你想要亲手制作一个Hexo的主题，那么就要深入了解这块内容。每一个主题至少都要包含index模板，下面是各页面对应的模板名称：</p><ul><li>index 首页</li><li>post 文章</li><li>page 分页</li><li>archive 归档</li><li>category 分类归档</li><li>tag 标签归档</li></ul><h5 id="Layouts-布局"><a href="#Layouts-布局" class="headerlink" title="Layouts 布局"></a>Layouts 布局</h5><p>如果页面结构类似，模板之间都包含相同结构，可以使用布局功能让模板共享相同结构。一个布局文件必须要能包含显示body变量内容，如此一来模板内容才能显示。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- index.ejs --&gt;</span><br><span class="line">index</span><br><span class="line">&lt;!-- layout.ejs --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;%- body %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>生成结果：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        index</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个模板都默认使用 <strong>layout</strong> 布局，你可在文章的前置申明指定布局。比如 post 或者 page 或者设为 false 来关闭布局功能。如果不填默认是 post ，这个在_config.yml中设置默认值，你甚至可以在布局中中再使用其它布局来建立嵌套布局。</p><h5 id="Pratials-局部模板"><a href="#Pratials-局部模板" class="headerlink" title="Pratials 局部模板"></a>Pratials 局部模板</h5><p>局部模板可以让你在不同的模板中分享相同的组件，例如Header，Footer，Sidebar侧边栏等，可以利用局部模版功能将各个组件分割独立的文件，便于维护。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- partial/header.ejs--&gt;</span><br><span class="line">&lt;h1 id=&quot;logo&quot;&gt;</span><br><span class="line">    &lt;%= config.title %&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;!-- index.ejs--&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">    Home page</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>生成就是：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    My Site</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    Home page</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。</p><h5 id="Local-Variables-本地变量"><a href="#Local-Variables-本地变量" class="headerlink" title="Local Variables 本地变量"></a>Local Variables 本地变量</h5><p>这里的变量指的是针对局部模板来使用的，你可以在局部模块中指定局部变量来进行传递。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--partial/header.ejs--&gt;</span><br><span class="line">&lt;h1 id=&quot;logo&quot;&gt;</span><br><span class="line">    &lt;%- title %&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;!--index.ejs--&gt;</span><br><span class="line">&lt;%- partial(&#x27;partial/header&#x27;,&#123;title:&#x27;Hello,World&#x27;&#125;) %&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">    Home page</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>生成后就是：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    Home page</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个也不难理解，就是传递变量的过程。</p><h5 id="Optimization-最优化"><a href="#Optimization-最优化" class="headerlink" title="Optimization 最优化"></a>Optimization 最优化</h5><p>假如你的主题特别复杂，因为要生成的文件过于庞大，这样导致hexo 生成性能下降，除了优化主题外，你可以通过 Fragment Caching 局部缓存的功能来处理。它主要的功能是缓存局部的内容，减少文件查询。</p><p>常用在哪些变动很少的模块。例如Header、Footer。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- fragment_cache(&#x27;header&#x27;,function()&#123;</span><br><span class="line">   retutn `&lt;header&gt;&lt;/header&gt;` </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果使用局部模板的话，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- partial(&#x27;header&#x27;,&#123;&#125;,&#123;cache:true&#125;);</span><br></pre></td></tr></table></figure><p>但是需要注意的是，如果开启了<code>relativet1_link</code>参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。</p><h4 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h4><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><ul><li><code>site</code>网站变量</li><li><code>site.posts</code> 所有文章</li><li><code>site.pages</code>所有分类</li><li><code>site.categories</code>所有分类</li><li><code>site.tags</code>所有标签</li><li><code>page</code>针对改页面的内容以及申明前置所设定的变量</li><li><code>config</code>配置文件中的变量</li><li><code>theme</code>配置文件中的变量</li><li><code>_</code>lodash函数库</li><li><code>path</code>当前页面的路径(不含根路径)</li><li><code>url</code>页面完整</li><li><code>env</code>环境变量</li></ul><h5 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h5><p><strong>Page</strong> 这里指的是 <code>hexo new page</code>创建的页面</p><ul><li><code>page.title</code>文章标题</li><li><code>page.date</code>文章建立日期</li><li><code>page.updated</code>文章更新日期</li><li><code>page.comments</code>留言是否开启</li><li><code>page.layout</code>布局名称</li><li><code>page.content</code>文章完整内容</li><li><code>page.excerpt</code>文章摘要</li><li><code>page.more</code>除了摘要的其它内容</li><li><code>page.source</code>文章原始路径</li><li><code>page.full_source</code>文章完整原始路径</li><li><code>page.path</code>文章网址(不含根路径)，通常在主题中使用 <code>url_for(page.path)</code></li><li><code>page.permalink</code>文章永久网址</li><li><code>page.prev</code>上一章，如果此为第一篇文章则为 <code>null</code></li><li><code>page.next</code>下一章，如果此为最后一篇文章则为 <code>null</code></li><li><code>page.raw</code>文章的原始内容</li><li><code>page.photos</code>文章的照片(用于相册)</li><li><code>page.link</code>文章的外链(用于链接文章)</li></ul><p><strong>Post</strong>这里指的是文章页面，与page布局相同，添加如下变量：</p><ul><li><code>page.pulished</code>文章非草稿为 <code>true</code></li><li><code>page.categories</code>文章分类</li><li><code>page.tags</code>文章的标签</li></ul><p><strong>首页 index</strong></p><ul><li><code>page.per_page</code>每一页显示的文章数</li><li><code>page.total</code>文章数量</li><li><code>page.current</code>  当前页码</li><li><code>page.current_url</code>当前页的URL </li><li><code>page.posts</code>当前页的文章ge</li><li><code>page.prev</code>前一页页码，如果为第一页，该值为0</li><li><code>page.prev_link</code>前一页URL，如果为第一页，则为“</li><li><code>page.next_link</code>后一页URL，如果为最后一页，则为”</li><li><code>page.path</code>当前不含根路径网址，通常在主题中使用 <code>url_for(page.path)</code></li></ul><p><strong>归档页 archive</strong></p><p>与<code>index</code>布局相同，但是新增如下变量</p><ul><li><code>archive</code>为 <code>true</code></li><li><code>year</code>归档年份</li><li><code>month</code>归档月份</li></ul><p><strong>分类页 category</strong></p><p>与 <code> index</code> 布局相同，但是新增如下变量</p><ul><li><code>category</code>分类名称</li></ul><p><strong>标签页</strong></p><p>与 <code> index</code> 布局相同，但是新增如下变量</p><ul><li><code>tag</code>标签名称</li></ul><h4 id="帮助函数"><a href="#帮助函数" class="headerlink" title="帮助函数"></a>帮助函数</h4><p>帮助函数用于在模板中快速插入内容</p><h5 id="url"><a href="#url" class="headerlink" title="url"></a>url</h5><ol><li><p><code>url_for</code>返回一个带root路径的，用法 <code>&lt;%- url_for(path) %&gt;</code></p></li><li><p><code>relative_url</code>返回from相对的to路径，用法 <code>&lt;%- relative_url %&gt;</code></p></li><li><p><code>gravater</code>插入Gravatar图片，用法：<code>&lt;%- gravagtar(email,[size]) %&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- gravatar(&#x27;a@abc.com&#x27;) %&gt;</span><br><span class="line"> // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787</span><br><span class="line">&lt;%- gravatar(&#x27;a@abc.com&#x27;,40) %&gt;</span><br><span class="line"> // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40</span><br></pre></td></tr></table></figure></li></ol><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><ol><li><p><code>css</code>载入CSS文件。用法：<code>&lt;% css(path,...) %&gt;</code>,<code>path</code>可以是数据或者字符串，如果 <code>path</code>开头不是 <code>/</code> 或者任何协议，则会自动加上根路径，如果没有 <code>.css</code>扩展名，也会自动加上。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- css(&#x27;style.css&#x27;) %&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">   </span><br><span class="line">&lt;%- css([&#x27;style.css&#x27;, &#x27;screen.css&#x27;]) %&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>js</code> 载入 JavaScript 文件。用法：<code>&lt;%- js(path, ...) %&gt;</code>，<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code>或任何协议，则会自动加上根路径；如果后面没有加上 <code>.js</code>扩展名的话，也会自动加上。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- js(&#x27;script.js&#x27;) %&gt;</span><br><span class="line">// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;%- js([&#x27;script.js&#x27;, &#x27;gallery.js&#x27;]) %&gt;</span><br><span class="line">// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>link_to</code> 插入链接。用法：<code>&lt;%- link_to(path, [text], [options]) %&gt;</code>，<code>options</code>参数有：</p><ul><li><p><code>external</code> 在新窗口中打开链接，默认值为false</p></li><li><p><code>class</code> Class名称，也就是html标签a的class名</p></li><li><p><code>id</code> ID名，也就是html标签a的id名</p></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;, &#x27;Google&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;, &#x27;Google&#x27;, &#123;external: true, class: &quot;link&quot;&#125;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>mail_to</code> 插入电子邮件链接。用法：<code>&lt;%- mail_to(path, [text], [options])%&gt;</code>，<code>options</code>参数有：</li></ol><ul><li><code>class</code> Class名称，也就是html标签a的class名</li><li><code>id</code> ID名，也就是html标签a的id名</li><li><code>subject</code> 邮件主题</li><li><code>cc</code> 抄送（CC）</li><li><code>bcc</code> 密送（BCC）</li><li><code>body</code> 邮件内容</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- mail_to(&#x27;a@abc.com&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- mail_to(&#x27;a@abc.com&#x27;, &#x27;Email&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;  </span><br></pre></td></tr></table></figure><p>5.<code>image_tag</code> 插入图片。用法：<code>&lt;%- image_tag(path, [options]) %&gt;</code>，<code>options</code>参数有：</p><ul><li><code>class</code> Class名称，也就是html标签a的class名</li><li><code>id</code> ID名，也就是html标签a的id名</li><li><code>alt</code> 替代文字</li><li><code>width</code> 宽度</li><li><code>height</code> 高度</li></ul><p>基本上就是<code>img</code>标签里的属性值。</p><p>6.<code>favicon_tag</code>插入favicon。用法：<code>&lt;%- favicon_tag(path) %&gt;</code></p><p>7.<code>feed_tag</code> 插入feed链接。用法：<code>&lt;%- feed_tag(path, [options]) %&gt;</code>，参数有：<code>title</code>和<code>type</code>(默认值为atom)</p><h5 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h5><ul><li><code>is_current</code> 判断<code>path</code>是否符合目前页面的网址。<code>&lt;%- is_current(path, [strict]) %&gt;</code></li><li><code>is_home</code> 判断目前是否为首页。</li><li><code>is_post</code> 检查目前是否为文章。 <code>&lt;%- is_post() %&gt;</code></li><li><code>is_archive</code> 检查目前是否为存档页面。<code>&lt;%- is_archive() %&gt;</code></li><li><code>is_year</code> 检查目前是否为年度归档页面。<code>&lt;%- is_year() %&gt;</code></li><li><code>is_month</code>检查目前是否为月度归档页面。&lt;%- is_month() %&gt;</li><li><code>is_category</code>检查目前是否为分类归档页面。&lt;%- is_category() %&gt;</li><li><code>is_tag</code>检查目前是否为标签归档页面。<code>&lt;%- is_tag() %&gt;</code></li></ul><h5 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h5><ul><li><code> trim</code>清楚字符串开头和结尾的空格。<code>&lt;%- trim(string) %&gt; </code></li><li><code>strip_html</code>清楚字符串中HTML标签。<code>&lt;%- strip_html(string) %&gt;</code></li><li><code>titlecase</code>把字符串转换为Title case。<code>&lt;%- titlecase(string) %&gt;</code></li><li><code>markdown</code>使用 Markdown 解析字符串。<code>&lt;%- markdown(string) %&gt;</code></li><li><code>render</code> 解析字符串。<code>&lt;%- render(str, engine, [options]) %&gt;</code></li><li><code>word_wrap</code>使每行的字符串长度不超过 <code>length</code>。<code>length</code> 预设为 80。<code>&lt;%- word_wrap(str, [length]) %&gt;</code></li><li><code>truncate</code>移除超过 <code>length</code> 长度的字符串。<code>&lt;%- truncate(text, length) %&gt;</code></li></ul><h5 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h5><ul><li><code>partial</code>载入其它模板文件，你可在 <code>locals</code>设定变量。<code>&lt;%- partial(layout,[locals],[options]) %&gt;</code></li></ul><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>cache</td><td>缓存，使用Fragment cache</td><td><code>false</code></td></tr><tr><td>only</td><td>限制局部变量，在模板中只能使用 <code>locals</code>中设定的变量</td><td><code>false</code></td></tr></tbody></table><ul><li><code>fragment_cache</code>局部缓存。它储存局部内容，下次使用时就能直接使用缓存。<code>&lt;%- fragment_cache(id, fn);</code></li></ul><h5 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h5><p><code>date</code>插入的格式化的日期，Unix，ISO字符串，Date对象或Moment对象。</p><p><code>format</code>默认为 <code>date_format</code>配置信息。</p><p><code>&lt;%- date(Date.now(),&#39;YYYY/M/D) %&gt;</code></p><p><code>date_xml</code>插入XML格式的日期。数据格式和调用同上。</p><p><code>time</code>&#x2F;<code>full_date</code></p><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><ul><li><code>list_categories</code>插入分类列表，<code>&lt;%- list_categories([categories], [options]) %&gt;</code></li><li><code>list_tags</code></li><li><code>list_archives</code></li><li><code>lsit_posts</code></li><li><code>tagclound</code><strong>想要学习</strong></li><li><code>paginator</code>插入分页连接</li><li><code>search_form</code>插入谷歌搜索</li><li><code>number_format</code></li><li><code>open_graph</code></li><li><code>toc</code></li></ul><h4 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h4><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>上面提到的所有<code>Options</code>参数一定要按照<code>json</code>的格式来书写；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844903469669679117&quot;&gt;hexo设计模式探索&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="web" scheme="https://fireman-34.github.io/categories/web/"/>
    
    <category term="hexo" scheme="https://fireman-34.github.io/categories/web/hexo/"/>
    
    
    <category term="hexo" scheme="https://fireman-34.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客部署</title>
    <link href="https://fireman-34.github.io/2022/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
    <id>https://fireman-34.github.io/2022/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</id>
    <published>2022-06-04T11:09:14.000Z</published>
    <updated>2022-06-06T01:30:28.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-CDN-加速你的-GitHub-Pages-网站"><a href="#使用-CDN-加速你的-GitHub-Pages-网站" class="headerlink" title="使用 CDN 加速你的 GitHub Pages 网站"></a>使用 CDN 加速你的 GitHub Pages 网站</h1><p><strong>感谢</strong></p><ul><li>云游君！： <a href="https://www.yunyoujun.cn/posts/use-cdn-speed-up-site/">使用 CDN 加速你的 GitHub Pages 网站</a></li><li><a href="https://blog.csdn.net/hl_java/article/details/83989727">DNS术语中的CNAME、A、MX、TTL名词解释</a></li><li><a href="https://blog.csdn.net/huiruwei1020/article/details/107728435">利用CDN加速GithubPage访问速度</a></li><li><a href="https://app.netlify.com/">免费网站部署</a></li></ul><hr><p><strong>记录</strong></p><ol><li><p>GitHub登陆验证过程</p><p>采用跳转到验证</p></li></ol><p><strong>词汇</strong></p><p>FreeLancer自由职业者</p><p>Hobby developer业余爱好者</p><p>Other其他者</p><p>overview概述</p><p>permission准许</p><p>Verify验证</p><p><strong>术语</strong></p><ul><li>DNS(域名)</li></ul><ol><li>A(Address)记录是用来指定主机名（或域名）对应的IP地址记录，绑定Web Server</li><li>MAX(Mail exchanger)邮件路由记录，绑定Mail Server。</li><li>CNAME(Canonical name)别名记录，多个域名指向同一个ip。</li><li>TTL(Time To Line)生存时间，指的是对未知域名记录的缓存存在时间，缓存策略。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-CDN-加速你的-GitHub-Pages-网站&quot;&gt;&lt;a href=&quot;#使用-CDN-加速你的-GitHub-Pages-网站&quot; class=&quot;headerlink&quot; title=&quot;使用 CDN 加速你的 GitHub Pages 网站&quot;&gt;&lt;/a&gt;使用 CD</summary>
      
    
    
    
    <category term="web" scheme="https://fireman-34.github.io/categories/web/"/>
    
    <category term="hexo" scheme="https://fireman-34.github.io/categories/web/hexo/"/>
    
    <category term="部署" scheme="https://fireman-34.github.io/categories/web/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="hexo" scheme="https://fireman-34.github.io/tags/hexo/"/>
    
    <category term="部署" scheme="https://fireman-34.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>梦中等雨</title>
    <link href="https://fireman-34.github.io/2022/%E6%A2%A6%E4%B8%AD%E7%AD%89%E9%9B%A8/"/>
    <id>https://fireman-34.github.io/2022/%E6%A2%A6%E4%B8%AD%E7%AD%89%E9%9B%A8/</id>
    <published>2022-06-04T03:04:33.000Z</published>
    <updated>2022-06-06T01:19:13.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　今早我从睡醒开始到10：30，一直在浅学hexo的博客搭建，学习了简单的代码块语法，以及高亮尝试，中间浅浅地接触了yaml格式配置，highlight.js高亮。</p><p>　　然而我的早餐时间，并未开始。于是乎，到10：30时，我准备去附近的肉夹馍店……在前往的途中，遇上了这场雨，它似乎想要告诉我什么。</p><h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><ul><li>初始<br>　　简单的穿了鞋子，没有带上任何东西的我，出了门。</li></ul><p>　　开始的时候，雨犹如细丝，一丝丝地落在我的周围，我也享受这种视觉感受。</p><p>　　逐渐，雨开始大了点，雨由丝化滴，稀疏地滴落在我的衣服上。我也渐渐地靠向附近地屋檐边躲雨边前行。</p><ul><li>发生<br>　　在到达一个楼道通口的时候，细雨连成线，我就停下了前往吃饭的意识，收紧步伐，等待雨停之时……<br>　　等雨的时间里，雨落声音又带着我进入那种体验者的感觉，没有目的，没有束缚。它是想告诉我什么，停止步伐，还是继续前进。<br>　　雨的一切好像占据了我的格式塔心智，雨在告诉我它的众生相，我仿佛见到了众生在它里五味杂陈。谁能言的明“雨”的相，吾的“雨”与汝的“雨”如何相同呢？雨的到来，风的羁绊。风雨里的心仿佛都在彷徨着远方的灯塔，迫切地焦急地追逐。我如我所见，我的心在此刻亦如焦灼般的追逐。亦如我现在对找工作的态度一样。对于雨，我知道我的这份等待，雨终将会停止并等待下一次的到来，我可以等待；而我的人生，自己的工作，或许亦如所有，同样也只有等待，去明白自己的追寻，去沉淀自己的感觉，才能在等待中明白自己的所有。雨仿佛知道我的等待，越下越大，我再一次沉浸其中，然而风的存在却在呼唤着我，它的存在。我想是的，如我们所“见”，我们只在乎我们知道的。<br>　　雨，它的所有，填充着每个人的心灵，成为背景，成为旋律，成为遇见，成为我们每个的相。<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1>　　雨在述说着它的一切，而我是这场雨的一个观众。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　今早我从睡醒开始到10：30，一直在浅学hexo的博客搭建，学习了简单的代码块语法，以及高亮尝试，中间浅浅地接触了yaml格式配置，hi</summary>
      
    
    
    
    <category term="体验" scheme="https://fireman-34.github.io/categories/%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="人生" scheme="https://fireman-34.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建日志</title>
    <link href="https://fireman-34.github.io/2022/hexo%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/"/>
    <id>https://fireman-34.github.io/2022/hexo%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/</id>
    <published>2022-06-03T04:45:49.000Z</published>
    <updated>2022-06-08T13:33:21.264Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 搭建过程，部分记录,笔记，零碎。</p><p>在整理途中，发现一些内容其实是摘抄，有的还比较长，而且还抄了一半。</p><p>つ﹏⊂</p><p>所以为脸面和整洁，我决定更多以链接形式的，这里更多的是一些使用bug 或者体会心得。</p><hr><h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><ol><li><a href="https://blog.csdn.net/weixin_54880923/article/details/115319991">yml</a></li><li><a href="https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/#yaml">yml,in,markdown</a></li><li><a href="https://blog.csdn.net/weixin_42305648/article/details/114733118">代码高亮</a></li><li><a href="https://www.jianshu.com/p/65ab196bef04">代码高亮2</a></li><li><a href="https://www.jianshu.com/p/43eb0819f51a"><code>Hexo</code>数据文件功能添加友情链接</a></li><li><a href="https://blog.csdn.net/weixin_33857230/article/details/91474562"><code>Hexo</code> 添加分类及标签</a></li><li><a href="https://hexo.io/zh-cn/"><code>Hexo</code></a></li><li><a href="https://markdown.com.cn/"><code>Markdown</code></a></li></ol><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h2 id="markdown-语法"><a href="#markdown-语法" class="headerlink" title="markdown 语法"></a>markdown 语法</h2><p>[^markdown]: suppurt html,css.js in it.</p><ul><li>代码块</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="code">```language</span></span><br><span class="line"><span class="code">code</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure><ul><li>缩进</li></ul><h2 id="yaml-语法"><a href="#yaml-语法" class="headerlink" title="yaml 语法"></a>yaml 语法</h2><ul><li><p>普通键值对</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备注</span></span><br><span class="line"><span class="attr">key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure></li><li><p>对象键值对</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">person：</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">无为</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> &#123;</span><br><span class="line">   <span class="attr">key:</span> <span class="string">value</span>,</span><br><span class="line">   <span class="attr">key:</span> <span class="string">value</span></span><br><span class="line">   &#125;   </span><br></pre></td></tr></table></figure></li><li><p>数组键值对   </p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="bullet">-</span> <span class="string">value</span> <span class="bullet">-</span> <span class="string">value</span></span><br></pre></td></tr></table></figure>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> [<span class="string">value</span>,<span class="string">value</span>]</span><br></pre></td></tr></table></figure></li><li><p>集合</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> [&#123;<span class="attr">key:</span> <span class="string">value</span>&#125;,&#123;<span class="attr">key:</span> <span class="string">value</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2></li></ul><ol><li><p>打包没有发现Hexo语法高亮<br> 尝试其他代码块,markdown语法编译器可以高亮，但hexo打包没有高亮&#x3D;&gt;step1<br> 打包没有对应的样式包&#x3D;&gt;step 2<br> 浏览器样式区别对比&#x3D;&gt;step 3<br> 解决了，过程里发现自己在之前关闭高亮设置，hexo clean，hexo server&#x3D;&gt;step 4</p></li><li><p>Hexo markdown 代码块多行字体显示不全</p><p> 浏览器排查，发现是padding属性导致字体显示空间错误。&#x3D;&gt;step 1</p><p> 配置没有开启多行&#x3D;&gt; step 2</p></li><li><p>做笔记最好整洁好看。——整理的≧ ﹏ ≦</p></li><li><p>在一个while判断的时候，只要循环条件不被打破，就无法history.back();<br> 问题解决了，明明我会的的，哼！</p><p> BOM API is belong to async，and while is a sync code,now if you wan to make it work frist you should break it or make it can’t work.</p></li><li><p>低级错误对着在线发布页面测试</p></li></ol><hr><h1 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h1><p>分类：具有顺序和层次这一概念，即需要逻辑层次。<br>        标签：则没有顺序和层次，不需要逻辑层次。</p><h2 id="创建选项"><a href="#创建选项" class="headerlink" title="创建选项"></a>创建选项</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page[layout] categories/tags</span><br></pre></td></tr></table></figure><h2 id="追加选项"><a href="#追加选项" class="headerlink" title="追加选项"></a>追加选项</h2><p>在生成的配置文件里追加type categories&#x2F;tags，如果是有配置化的布局，还可以加入layout配置。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> []</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> []</span><br><span class="line"><span class="section">layout: </span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="文章使用"><a href="#文章使用" class="headerlink" title="文章使用"></a>文章使用</h2><p>在 模板文件夹  (scaffolds) 可以直接配置后续使用命令即可创建 <code>hexo new scaffolds_folderName postName</code></p><pre><code>在文章里追加相应属性，categories/tags：- 属性1 -属性2</code></pre><hr><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ol><li>生成文件<br> hexo new [layout] fileName</li><li>草稿<br> hexo publice [layout] [title]</li><li>模板<br> 在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件。<br> 以下是您可以在模版中使用的变量：<br> layout，title，date</li><li>文章更新<br> _congfig.yml updated:true,ejs使用变量接受，应该是post.updated</li></ol><h2 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h2><p>post&#x2F;source&#x2F;page&#x3D;&gt;source&#x2F;_post\source\source&#x2F;_drafs</p><h2 id="支持格式"><a href="#支持格式" class="headerlink" title="支持格式"></a>支持格式</h2><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><hr><h1 id="标签插件语法"><a href="#标签插件语法" class="headerlink" title="标签插件语法"></a>标签插件语法</h1><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><style>    #logo{        font-size:10px;    }</style><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><ol><li>layout目录,layout.ejs为主体框架,partial为子目录</li><li><code>&lt;span id=&quot;logo&quot;&gt;&lt;%= title %&gt;&lt;/span&gt;</code>任意parial的模板header.ejs</li><li><code>&lt;%- partial(&#39;partial/header&#39;, &#123;title: &#39;Hello World&#39;&#125;) %&gt;</code>调用</li></ol><h1 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h1><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li><p>在实现文件加密，<code>ejs</code>的<code>JavaScript</code>标签不能内嵌一些变量元素，可能我没有深入学习，我采用另外一种迂回方案，就是<code>dom</code>，和传统组件以及<code>jsonp</code>技术类似获取变量元素。</p></li><li><p>在阅读主题时发现另一种js用esj语法变量的方法，之前可能没有加&#x3D;&#x2F;-，还有字符串,导致无效，目前看来只适合字符串形式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const str=&quot;&lt;%= post.password %&gt;&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo 搭建过程，部分记录,笔记，零碎。&lt;/p&gt;
&lt;p&gt;在整理途中，发现一些内容其实是摘抄，有的还比较长，而且还抄了一半。&lt;/p&gt;
&lt;p&gt;つ﹏⊂&lt;/p&gt;
&lt;p&gt;所以为脸面和整洁，我决定更多以链接形式的，这里更多的是一些使用bug 或者体会心得。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="Web" scheme="https://fireman-34.github.io/categories/Web/"/>
    
    <category term="hexo" scheme="https://fireman-34.github.io/categories/Web/hexo/"/>
    
    
    <category term="hexo" scheme="https://fireman-34.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://fireman-34.github.io/2022/hello-world/"/>
    <id>https://fireman-34.github.io/2022/hello-world/</id>
    <published>2022-06-03T03:45:54.267Z</published>
    <updated>2022-06-06T01:31:36.048Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul><li>Github</li><li>Nestify</li><li>Hexo</li><li>Ayer</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Web" scheme="https://fireman-34.github.io/categories/Web/"/>
    
    
  </entry>
  
</feed>
